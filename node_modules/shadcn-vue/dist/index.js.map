{"version":3,"sources":["../src/commands/init.ts","../src/utils/handle-error.ts","../src/utils/highlighter.ts","../src/utils/logger.ts","../src/utils/registry/schema.ts","../src/utils/updaters/update-tailwind-config.ts","../src/utils/spinner.ts","../src/utils/registry/index.ts","../src/utils/updaters/update-css-vars.ts","../src/utils/updaters/update-dependencies.ts","../src/utils/updaters/update-files.ts","../src/utils/frameworks.ts","../src/utils/resolve-import.ts","../src/utils/get-config.ts","../src/utils/get-package-info.ts","../src/utils/get-project-info.ts","../src/utils/transformers/transform-css-vars.ts","../src/utils/transformers/transform-import.ts","../src/utils/transformers/transform-sfc.ts","../src/utils/transformers/transform-tw-prefix.ts","../src/utils/transformers/index.ts","../src/utils/icon-libraries.ts","../src/utils/transformers/transform-icons.ts","../src/utils/add-components.ts","../src/utils/updaters/update-tailwind-content.ts","../src/utils/errors.ts","../src/preflights/preflight-add.ts","../src/commands/add.ts","../src/commands/diff.ts","../src/commands/info.ts","../src/migrations/migrate-icons.ts","../src/preflights/preflight-migrate.ts","../src/commands/migrate.ts","../src/index.ts","../package.json"],"sourcesContent":["import type { Config } from '@/src/utils/get-config'\nimport { promises as fs } from 'node:fs'\nimport { addComponents } from '@/src/utils/add-components'\nimport {\n  DEFAULT_COMPONENTS,\n  DEFAULT_TAILWIND_CONFIG,\n  DEFAULT_TAILWIND_CSS,\n  DEFAULT_UTILS,\n  getConfig,\n  rawConfigSchema,\n  resolveConfigPaths,\n} from '@/src/utils/get-config'\nimport { getProjectConfig, getProjectInfo } from '@/src/utils/get-project-info'\nimport { handleError } from '@/src/utils/handle-error'\nimport { highlighter } from '@/src/utils/highlighter'\nimport { logger } from '@/src/utils/logger'\nimport { getRegistryBaseColors, getRegistryStyles } from '@/src/utils/registry'\nimport { spinner } from '@/src/utils/spinner'\nimport { updateTailwindContent } from '@/src/utils/updaters/update-tailwind-content'\nimport { Command } from 'commander'\nimport path from 'pathe'\nimport prompts from 'prompts'\nimport { z } from 'zod'\n\nexport const initOptionsSchema = z.object({\n  cwd: z.string(),\n  components: z.array(z.string()).optional(),\n  yes: z.boolean(),\n  defaults: z.boolean(),\n  force: z.boolean(),\n  silent: z.boolean(),\n  isNewProject: z.boolean(),\n  srcDir: z.boolean().optional(),\n})\n\nexport const init = new Command()\n  .name('init')\n  .description('initialize your project and install dependencies')\n  .argument(\n    '[components...]',\n    'the components to add or a url to the component.',\n  )\n  .option('-y, --yes', 'skip confirmation prompt.', true)\n  .option('-d, --defaults,', 'use default configuration.', false)\n  .option('-f, --force', 'force overwrite of existing configuration.', false)\n  .option(\n    '-c, --cwd <cwd>',\n    'the working directory. defaults to the current directory.',\n    process.cwd(),\n  )\n  .option('-s, --silent', 'mute output.', false)\n  .option(\n    '--src-dir',\n    'use the src directory when creating a new project.',\n    false,\n  )\n  .action(async (components, opts) => {\n    try {\n      const options = initOptionsSchema.parse({\n        cwd: path.resolve(opts.cwd),\n        isNewProject: false,\n        components,\n        ...opts,\n      })\n\n      await runInit(options)\n\n      logger.log(\n        `${highlighter.success(\n          'Success!',\n        )} Project initialization completed.\\nYou may now add components.`,\n      )\n      logger.break()\n    }\n    catch (error) {\n      logger.break()\n      handleError(error)\n    }\n  })\n\nexport async function runInit(\n  options: z.infer<typeof initOptionsSchema> & {\n    skipPreflight?: boolean\n  },\n) {\n  // let projectInfo\n  // if (!options.skipPreflight) {\n  //   const preflight = await preFlightInit(options)\n  //   if (preflight.errors[ERRORS.MISSING_DIR_OR_EMPTY_PROJECT]) {\n  //     process.exit(1)\n  //   }\n  //   // if (preflight.errors[ERRORS.MISSING_DIR_OR_EMPTY_PROJECT]) {\n  //   //   const { projectPath } = await createProject(options)\n  //   //   if (!projectPath) {\n  //   //     process.exit(1)\n  //   //   }\n  //   //   options.cwd = projectPath\n  //   //   options.isNewProject = true\n  //   // }\n  //   projectInfo = preflight.projectInfo\n  // }\n  // else {\n  // }\n  const projectInfo = await getProjectInfo(options.cwd)\n  const projectConfig = await getProjectConfig(options.cwd, projectInfo)\n\n  const config = projectConfig\n    ? await promptForMinimalConfig(projectConfig, options)\n    : await promptForConfig(await getConfig(options.cwd))\n\n  if (!options.yes) {\n    const { proceed } = await prompts({\n      type: 'confirm',\n      name: 'proceed',\n      message: `Write configuration to ${highlighter.info(\n        'components.json',\n      )}. Proceed?`,\n      initial: true,\n    })\n\n    if (!proceed) {\n      process.exit(0)\n    }\n  }\n\n  // Write components.json.\n  const componentSpinner = spinner(`Writing components.json.`).start()\n  const targetPath = path.resolve(options.cwd, 'components.json')\n  await fs.writeFile(targetPath, JSON.stringify(config, null, 2), 'utf8')\n  componentSpinner.succeed()\n\n  // Add components.\n  const fullConfig = await resolveConfigPaths(options.cwd, config)\n  const components = ['index', ...(options.components || [])]\n  await addComponents(components, fullConfig, {\n    // Init will always overwrite files.\n    overwrite: true,\n    silent: options.silent,\n    isNewProject:\n      options.isNewProject || projectInfo?.framework.name === 'nuxt',\n  })\n\n  // If a new project is using src dir, let's update the tailwind content config.\n  // TODO: Handle this per framework.\n  if (options.isNewProject && options.srcDir) {\n    await updateTailwindContent(\n      ['./src/**/*.{js,ts,jsx,tsx,mdx}'],\n      fullConfig,\n      {\n        silent: options.silent,\n      },\n    )\n  }\n\n  return fullConfig\n}\n\nasync function promptForConfig(defaultConfig: Config | null = null) {\n  const [styles, baseColors] = await Promise.all([\n    getRegistryStyles(),\n    getRegistryBaseColors(),\n  ])\n\n  logger.info('')\n  const options = await prompts([\n    {\n      type: 'toggle',\n      name: 'typescript',\n      message: `Would you like to use ${highlighter.info(\n        'TypeScript',\n      )} (recommended)?`,\n      initial: defaultConfig?.typescript ?? true,\n      active: 'yes',\n      inactive: 'no',\n    },\n    {\n      type: 'select',\n      name: 'style',\n      message: `Which ${highlighter.info('style')} would you like to use?`,\n      choices: styles.map(style => ({\n        title: style.name === 'new-york' ? 'New York (Recommended)' : style.label,\n        value: style.name,\n      })),\n    },\n    {\n      type: 'select',\n      name: 'tailwindBaseColor',\n      message: `Which color would you like to use as the ${highlighter.info(\n        'base color',\n      )}?`,\n      choices: baseColors.map(color => ({\n        title: color.label,\n        value: color.name,\n      })),\n    },\n    {\n      type: 'text',\n      name: 'tailwindCss',\n      message: `Where is your ${highlighter.info('global CSS')} file?`,\n      initial: defaultConfig?.tailwind.css ?? DEFAULT_TAILWIND_CSS,\n    },\n    {\n      type: 'toggle',\n      name: 'tailwindCssVariables',\n      message: `Would you like to use ${highlighter.info(\n        'CSS variables',\n      )} for theming?`,\n      initial: defaultConfig?.tailwind.cssVariables ?? true,\n      active: 'yes',\n      inactive: 'no',\n    },\n    {\n      type: 'text',\n      name: 'tailwindPrefix',\n      message: `Are you using a custom ${highlighter.info(\n        'tailwind prefix eg. tw-',\n      )}? (Leave blank if not)`,\n      initial: '',\n    },\n    {\n      type: 'text',\n      name: 'tailwindConfig',\n      message: `Where is your ${highlighter.info(\n        'tailwind.config.js',\n      )} located?`,\n      initial: defaultConfig?.tailwind.config ?? DEFAULT_TAILWIND_CONFIG,\n    },\n    {\n      type: 'text',\n      name: 'components',\n      message: `Configure the import alias for ${highlighter.info(\n        'components',\n      )}:`,\n      initial: defaultConfig?.aliases.components ?? DEFAULT_COMPONENTS,\n    },\n    {\n      type: 'text',\n      name: 'utils',\n      message: `Configure the import alias for ${highlighter.info('utils')}:`,\n      initial: defaultConfig?.aliases.utils ?? DEFAULT_UTILS,\n    },\n  ])\n\n  return rawConfigSchema.parse({\n    $schema: 'https://shadcn-vue.com/schema.json',\n    style: options.style,\n    tailwind: {\n      config: options.tailwindConfig,\n      css: options.tailwindCss,\n      baseColor: options.tailwindBaseColor,\n      cssVariables: options.tailwindCssVariables,\n      prefix: options.tailwindPrefix,\n    },\n    typescript: options.typescript,\n    aliases: {\n      utils: options.utils,\n      components: options.components,\n      // TODO: fix this.\n      lib: options.components.replace(/\\/components$/, '/lib'),\n      composables: options.components.replace(/\\/components$/, '/composables'),\n    },\n  })\n}\n\nasync function promptForMinimalConfig(\n  defaultConfig: Config,\n  opts: z.infer<typeof initOptionsSchema>,\n) {\n  let style = defaultConfig.style\n  let baseColor = defaultConfig.tailwind.baseColor\n  let cssVariables = defaultConfig.tailwind.cssVariables\n\n  if (!opts.defaults) {\n    const [styles, baseColors] = await Promise.all([\n      getRegistryStyles(),\n      getRegistryBaseColors(),\n    ])\n\n    const options = await prompts([\n      {\n        type: 'select',\n        name: 'style',\n        message: `Which ${highlighter.info('style')} would you like to use?`,\n        choices: styles.map(style => ({\n          title: style.name === 'new-york' ? 'New York (Recommended)' : style.label,\n          value: style.name,\n        })),\n        initial: 0,\n      },\n      {\n        type: 'select',\n        name: 'tailwindBaseColor',\n        message: `Which color would you like to use as the ${highlighter.info(\n          'base color',\n        )}?`,\n        choices: baseColors.map(color => ({\n          title: color.label,\n          value: color.name,\n        })),\n      },\n      {\n        type: 'toggle',\n        name: 'tailwindCssVariables',\n        message: `Would you like to use ${highlighter.info(\n          'CSS variables',\n        )} for theming?`,\n        initial: defaultConfig?.tailwind.cssVariables,\n        active: 'yes',\n        inactive: 'no',\n      },\n    ])\n\n    style = options.style\n    baseColor = options.tailwindBaseColor\n    cssVariables = options.tailwindCssVariables\n  }\n\n  return rawConfigSchema.parse({\n    $schema: defaultConfig?.$schema,\n    style,\n    tailwind: {\n      ...defaultConfig?.tailwind,\n      baseColor,\n      cssVariables,\n    },\n    aliases: defaultConfig?.aliases,\n    iconLibrary: defaultConfig?.iconLibrary,\n  })\n}\n","import { consola } from 'consola'\n\nexport function handleError(error: unknown) {\n  consola.log('this is error: ', error)\n  if (typeof error === 'string') {\n    consola.error(error)\n    process.exit(1)\n  }\n\n  if (error instanceof Error) {\n    consola.error(error.message)\n    process.exit(1)\n  }\n\n  consola.error('Something went wrong. Please try again.')\n  process.exit(1)\n}\n","import { colors } from 'consola/utils'\n\nexport const highlighter = {\n  error: colors.red,\n  warn: colors.yellow,\n  info: colors.cyan,\n  success: colors.green,\n}\n","import { highlighter } from '@/src/utils/highlighter'\nimport consola from 'consola'\n\nexport const logger = {\n  error(...args: unknown[]) {\n    consola.log(highlighter.error(args.join(' ')))\n  },\n  warn(...args: unknown[]) {\n    consola.log(highlighter.warn(args.join(' ')))\n  },\n  info(...args: unknown[]) {\n    consola.log(highlighter.info(args.join(' ')))\n  },\n  success(...args: unknown[]) {\n    consola.log(highlighter.success(args.join(' ')))\n  },\n  log(...args: unknown[]) {\n    consola.log(args.join(' '))\n  },\n  break() {\n    consola.log('')\n  },\n}\n","import { z } from 'zod'\n\n// TODO: Extract this to a shared package.\nexport const registryItemTypeSchema = z.enum([\n  'registry:style',\n  'registry:lib',\n  'registry:example',\n  'registry:block',\n  'registry:component',\n  'registry:ui',\n  'registry:hook',\n  'registry:theme',\n  'registry:page',\n])\n\nexport const registryItemFileSchema = z.object({\n  path: z.string(),\n  content: z.string().optional(),\n  type: registryItemTypeSchema,\n  target: z.string().optional(),\n})\n\nexport const registryItemTailwindSchema = z.object({\n  config: z\n    .object({\n      content: z.array(z.string()).optional(),\n      theme: z.record(z.string(), z.any()).optional(),\n      plugins: z.array(z.string()).optional(),\n    })\n    .optional(),\n})\n\nexport const registryItemCssVarsSchema = z.object({\n  light: z.record(z.string(), z.string()).optional(),\n  dark: z.record(z.string(), z.string()).optional(),\n})\n\nexport const registryItemSchema = z.object({\n  name: z.string(),\n  type: registryItemTypeSchema,\n  description: z.string().optional(),\n  dependencies: z.array(z.string()).optional(),\n  devDependencies: z.array(z.string()).optional(),\n  registryDependencies: z.array(z.string()).optional(),\n  files: z.array(registryItemFileSchema).optional(),\n  tailwind: registryItemTailwindSchema.optional(),\n  cssVars: registryItemCssVarsSchema.optional(),\n  meta: z.record(z.string(), z.any()).optional(),\n  docs: z.string().optional(),\n})\n\nexport type RegistryItem = z.infer<typeof registryItemSchema>\n\nexport const registryIndexSchema = z.array(\n  registryItemSchema.extend({\n    files: z.array(z.union([z.string(), registryItemFileSchema])).optional(),\n  }),\n)\n\nexport const stylesSchema = z.array(\n  z.object({\n    name: z.string(),\n    label: z.string(),\n  }),\n)\n\nexport const iconsSchema = z.record(\n  z.string(),\n  z.record(z.string(), z.string()),\n)\n\nexport const registryBaseColorSchema = z.object({\n  inlineColors: z.object({\n    light: z.record(z.string(), z.string()),\n    dark: z.record(z.string(), z.string()),\n  }),\n  cssVars: z.object({\n    light: z.record(z.string(), z.string()),\n    dark: z.record(z.string(), z.string()),\n  }),\n  inlineColorsTemplate: z.string(),\n  cssVarsTemplate: z.string(),\n})\n\nexport const registryResolvedItemsTreeSchema = registryItemSchema.pick({\n  dependencies: true,\n  devDependencies: true,\n  files: true,\n  tailwind: true,\n  cssVars: true,\n  docs: true,\n})\n","import type { Config } from '@/src/utils/get-config'\nimport type { registryItemTailwindSchema } from '@/src/utils/registry/schema'\nimport type { Config as TailwindConfig } from 'tailwindcss'\nimport type {\n  ArrayLiteralExpression,\n  ObjectLiteralExpression,\n  PropertyAssignment,\n  VariableStatement,\n} from 'ts-morph'\nimport type { z } from 'zod'\nimport { promises as fs } from 'node:fs'\nimport { tmpdir } from 'node:os'\nimport { highlighter } from '@/src/utils/highlighter'\nimport { spinner } from '@/src/utils/spinner'\nimport deepmerge from 'deepmerge'\nimport path from 'pathe'\nimport objectToString from 'stringify-object'\nimport {\n  Project,\n  QuoteKind,\n  ScriptKind,\n  SyntaxKind,\n} from 'ts-morph'\n\nexport type UpdaterTailwindConfig = Omit<TailwindConfig, 'plugins'> & {\n  // We only want string plugins for now.\n  plugins?: string[]\n}\n\nexport async function updateTailwindConfig(\n  tailwindConfig:\n    | z.infer<typeof registryItemTailwindSchema>['config']\n    | undefined,\n  config: Config,\n  options: {\n    silent?: boolean\n  },\n) {\n  if (!tailwindConfig) {\n    return\n  }\n\n  options = {\n    silent: false,\n    ...options,\n  }\n\n  const tailwindFileRelativePath = path.relative(\n    config.resolvedPaths.cwd,\n    config.resolvedPaths.tailwindConfig,\n  )\n  const tailwindSpinner = spinner(\n    `Updating ${highlighter.info(tailwindFileRelativePath)}`,\n    {\n      silent: options.silent,\n    },\n  ).start()\n  const raw = await fs.readFile(config.resolvedPaths.tailwindConfig, 'utf8')\n  const output = await transformTailwindConfig(raw, tailwindConfig, config)\n  await fs.writeFile(config.resolvedPaths.tailwindConfig, output, 'utf8')\n  tailwindSpinner?.succeed()\n}\n\nexport async function transformTailwindConfig(\n  input: string,\n  tailwindConfig: UpdaterTailwindConfig,\n  config: Config,\n) {\n  const sourceFile = await _createSourceFile(input, config)\n  // Find the object with content property.\n  // This is faster than traversing the default export.\n  // TODO: maybe we do need to traverse the default export?\n  const configObject = sourceFile\n    .getDescendantsOfKind(SyntaxKind.ObjectLiteralExpression)\n    .find(node =>\n      node\n        .getProperties()\n        .some(\n          property =>\n            property.isKind(SyntaxKind.PropertyAssignment)\n            && property.getName() === 'content',\n        ),\n    )\n\n  // We couldn't find the config object, so we return the input as is.\n  if (!configObject) {\n    return input\n  }\n\n  const quoteChar = _getQuoteChar(configObject)\n\n  // Add darkMode.\n  addTailwindConfigProperty(\n    configObject,\n    {\n      name: 'darkMode',\n      value: 'class',\n    },\n    { quoteChar },\n  )\n\n  // Add Tailwind config plugins.\n  tailwindConfig.plugins?.forEach((plugin) => {\n    addTailwindConfigPlugin(configObject, plugin)\n  })\n\n  // Add Tailwind config theme.\n  if (tailwindConfig.theme) {\n    await addTailwindConfigTheme(configObject, tailwindConfig.theme)\n  }\n\n  return sourceFile.getFullText()\n}\n\nfunction addTailwindConfigProperty(\n  configObject: ObjectLiteralExpression,\n  property: {\n    name: string\n    value: string\n  },\n  {\n    quoteChar,\n  }: {\n    quoteChar: string\n  },\n) {\n  const existingProperty = configObject.getProperty('darkMode')\n\n  if (!existingProperty) {\n    const newProperty = {\n      name: property.name,\n      initializer: `[${quoteChar}${property.value}${quoteChar}]`,\n    }\n\n    // We need to add darkMode as the first property.\n    if (property.name === 'darkMode') {\n      configObject.insertPropertyAssignment(0, newProperty)\n      return configObject\n    }\n\n    configObject.addPropertyAssignment(newProperty)\n\n    return configObject\n  }\n\n  if (existingProperty.isKind(SyntaxKind.PropertyAssignment)) {\n    const initializer = existingProperty.getInitializer()\n    const newValue = `${quoteChar}${property.value}${quoteChar}`\n\n    // If property is a string, change it to an array and append.\n    if (initializer?.isKind(SyntaxKind.StringLiteral)) {\n      const initializerText = initializer.getText()\n      initializer.replaceWithText(`[${initializerText}, ${newValue}]`)\n      return configObject\n    }\n\n    // If property is an array, append.\n    if (initializer?.isKind(SyntaxKind.ArrayLiteralExpression)) {\n      // Check if the array already contains the value.\n      if (\n        initializer\n          .getElements()\n          .map(element => element.getText())\n          .includes(newValue)\n      ) {\n        return configObject\n      }\n      initializer.addElement(newValue)\n    }\n\n    return configObject\n  }\n\n  return configObject\n}\n\nasync function addTailwindConfigTheme(\n  configObject: ObjectLiteralExpression,\n  theme: UpdaterTailwindConfig['theme'],\n) {\n  // Ensure there is a theme property.\n  if (!configObject.getProperty('theme')) {\n    configObject.addPropertyAssignment({\n      name: 'theme',\n      initializer: '{}',\n    })\n  }\n\n  // Nest all spread properties.\n  nestSpreadProperties(configObject)\n\n  const themeProperty = configObject\n    .getPropertyOrThrow('theme')\n    ?.asKindOrThrow(SyntaxKind.PropertyAssignment)\n\n  const themeInitializer = themeProperty.getInitializer()\n  if (themeInitializer?.isKind(SyntaxKind.ObjectLiteralExpression)) {\n    const themeObjectString = themeInitializer.getText()\n    const themeObject = await parseObjectLiteral(themeObjectString)\n    const result = deepmerge(themeObject, theme, {\n      arrayMerge: (dst, src) => src,\n    })\n    const resultString = objectToString(result)\n      .replace(/'\\.\\.\\.(.*)'/g, '...$1') // Remove quote around spread element\n      .replace(/'\"/g, '\\'') // Replace `\\\" with \"\n      .replace(/\"'/g, '\\'') // Replace `\\\" with \"\n      .replace(/'\\[/g, '[') // Replace `[ with [\n      .replace(/\\]'/g, ']') // Replace `] with ]\n      .replace(/'\\\\'/g, '\\'') // Replace `\\' with '\n      .replace(/\\\\'/g, '\\'') // Replace \\' with '\n      .replace(/\\\\''/g, '\\'')\n      .replace(/''/g, '\\'')\n    themeInitializer.replaceWithText(resultString)\n  }\n\n  // Unnest all spread properties.\n  unnestSpreadProperties(configObject)\n}\n\nfunction addTailwindConfigPlugin(\n  configObject: ObjectLiteralExpression,\n  plugin: string,\n) {\n  const existingPlugins = configObject.getProperty('plugins')\n\n  if (!existingPlugins) {\n    configObject.addPropertyAssignment({\n      name: 'plugins',\n      initializer: `[${plugin}]`,\n    })\n\n    return configObject\n  }\n\n  if (existingPlugins.isKind(SyntaxKind.PropertyAssignment)) {\n    const initializer = existingPlugins.getInitializer()\n\n    if (initializer?.isKind(SyntaxKind.ArrayLiteralExpression)) {\n      if (\n        initializer\n          .getElements()\n          .map((element) => {\n            return element.getText().replace(/[\"']/g, '')\n          })\n          .includes(plugin.replace(/[\"']/g, ''))\n      ) {\n        return configObject\n      }\n      initializer.addElement(plugin)\n    }\n\n    return configObject\n  }\n\n  return configObject\n}\n\nexport async function _createSourceFile(input: string, config: Config | null) {\n  const dir = await fs.mkdtemp(path.join(tmpdir(), 'shadcn-'))\n  const resolvedPath\n    = config?.resolvedPaths?.tailwindConfig || 'tailwind.config.ts'\n  const tempFile = path.join(dir, `shadcn-${path.basename(resolvedPath)}`)\n\n  const project = new Project({\n    compilerOptions: {},\n  })\n  const sourceFile = project.createSourceFile(tempFile, input, {\n    // Note: .js and .mjs can still be valid for TS projects.\n    // We can't infer TypeScript from config.tsx.\n    scriptKind:\n      path.extname(resolvedPath) === '.ts' ? ScriptKind.TS : ScriptKind.JS,\n  })\n\n  return sourceFile\n}\n\nexport function _getQuoteChar(configObject: ObjectLiteralExpression) {\n  return configObject\n    .getFirstDescendantByKind(SyntaxKind.StringLiteral)\n    ?.getQuoteKind() === QuoteKind.Single\n    ? '\\''\n    : '\"'\n}\n\nexport function nestSpreadProperties(obj: ObjectLiteralExpression) {\n  const properties = obj.getProperties()\n\n  for (let i = 0; i < properties.length; i++) {\n    const prop = properties[i]\n    if (prop.isKind(SyntaxKind.SpreadAssignment)) {\n      const spreadAssignment = prop.asKindOrThrow(SyntaxKind.SpreadAssignment)\n      const spreadText = spreadAssignment.getExpression().getText()\n\n      // Replace spread with a property assignment\n      obj.insertPropertyAssignment(i, {\n        // Need to escape the name with \" so that deepmerge doesn't mishandle the key\n        name: `\"___${spreadText.replace(/^\\.\\.\\./, '')}\"`,\n        initializer: `\"...${spreadText.replace(/^\\.\\.\\./, '')}\"`,\n      })\n\n      // Remove the original spread assignment\n      spreadAssignment.remove()\n    }\n    else if (prop.isKind(SyntaxKind.PropertyAssignment)) {\n      const propAssignment = prop.asKindOrThrow(SyntaxKind.PropertyAssignment)\n      const initializer = propAssignment.getInitializer()\n\n      if (\n        initializer\n        && initializer.isKind(SyntaxKind.ObjectLiteralExpression)\n      ) {\n        // Recursively process nested object literals\n        nestSpreadProperties(\n          initializer.asKindOrThrow(SyntaxKind.ObjectLiteralExpression),\n        )\n      }\n      else if (\n        initializer\n        && initializer.isKind(SyntaxKind.ArrayLiteralExpression)\n      ) {\n        nestSpreadElements(\n          initializer.asKindOrThrow(SyntaxKind.ArrayLiteralExpression),\n        )\n      }\n    }\n  }\n}\n\nexport function nestSpreadElements(arr: ArrayLiteralExpression) {\n  const elements = arr.getElements()\n  for (let j = 0; j < elements.length; j++) {\n    const element = elements[j]\n    if (element.isKind(SyntaxKind.ObjectLiteralExpression)) {\n      // Recursive check on objects within arrays\n      nestSpreadProperties(\n        element.asKindOrThrow(SyntaxKind.ObjectLiteralExpression),\n      )\n    }\n    else if (element.isKind(SyntaxKind.ArrayLiteralExpression)) {\n      // Recursive check on nested arrays\n      nestSpreadElements(\n        element.asKindOrThrow(SyntaxKind.ArrayLiteralExpression),\n      )\n    }\n    else if (element.isKind(SyntaxKind.SpreadElement)) {\n      const spreadText = element.getText()\n      // Spread element within an array\n      arr.removeElement(j)\n      arr.insertElement(j, `\"${spreadText}\"`)\n    }\n  }\n}\n\nexport function unnestSpreadProperties(obj: ObjectLiteralExpression) {\n  const properties = obj.getProperties()\n\n  for (let i = 0; i < properties.length; i++) {\n    const prop = properties[i]\n    if (prop.isKind(SyntaxKind.PropertyAssignment)) {\n      const propAssignment = prop as PropertyAssignment\n      const initializer = propAssignment.getInitializer()\n\n      if (initializer && initializer.isKind(SyntaxKind.StringLiteral)) {\n        const value = initializer\n          .asKindOrThrow(SyntaxKind.StringLiteral)\n          .getLiteralValue()\n        if (value.startsWith('...')) {\n          obj.insertSpreadAssignment(i, { expression: value.slice(3) })\n          propAssignment.remove()\n        }\n      }\n      else if (initializer?.isKind(SyntaxKind.ObjectLiteralExpression)) {\n        unnestSpreadProperties(initializer as ObjectLiteralExpression)\n      }\n      else if (\n        initializer\n        && initializer.isKind(SyntaxKind.ArrayLiteralExpression)\n      ) {\n        unnsetSpreadElements(\n          initializer.asKindOrThrow(SyntaxKind.ArrayLiteralExpression),\n        )\n      }\n    }\n  }\n}\n\nexport function unnsetSpreadElements(arr: ArrayLiteralExpression) {\n  const elements = arr.getElements()\n  for (let j = 0; j < elements.length; j++) {\n    const element = elements[j]\n    if (element.isKind(SyntaxKind.ObjectLiteralExpression)) {\n      // Recursive check on objects within arrays\n      unnestSpreadProperties(\n        element.asKindOrThrow(SyntaxKind.ObjectLiteralExpression),\n      )\n    }\n    else if (element.isKind(SyntaxKind.ArrayLiteralExpression)) {\n      // Recursive check on nested arrays\n      unnsetSpreadElements(\n        element.asKindOrThrow(SyntaxKind.ArrayLiteralExpression),\n      )\n    }\n    else if (element.isKind(SyntaxKind.StringLiteral)) {\n      const spreadText = element.getText()\n      // check if spread element\n      const spreadTest = /^['\"](\\.\\.\\..*)['\"]$/g\n      if (spreadTest.test(spreadText)) {\n        arr.removeElement(j)\n        arr.insertElement(j, spreadText.replace(spreadTest, '$1'))\n      }\n    }\n  }\n}\n\nasync function parseObjectLiteral(objectLiteralString: string): Promise<any> {\n  const sourceFile = await _createSourceFile(\n    `const theme = ${objectLiteralString}`,\n    null,\n  )\n\n  const statement = sourceFile.getStatements()[0]\n  if (statement?.getKind() === SyntaxKind.VariableStatement) {\n    const declaration = (statement as VariableStatement)\n      .getDeclarationList()\n      ?.getDeclarations()[0]\n    const initializer = declaration.getInitializer()\n    if (initializer?.isKind(SyntaxKind.ObjectLiteralExpression)) {\n      return await parseObjectLiteralExpression(initializer)\n    }\n  }\n\n  throw new Error('Invalid input: not an object literal')\n}\n\nfunction parseObjectLiteralExpression(node: ObjectLiteralExpression): any {\n  const result: any = {}\n  for (const property of node.getProperties()) {\n    if (property.isKind(SyntaxKind.PropertyAssignment)) {\n      const name = property.getName().replace(/'/g, '')\n      if (\n        property.getInitializer()?.isKind(SyntaxKind.ObjectLiteralExpression)\n      ) {\n        result[name] = parseObjectLiteralExpression(\n          property.getInitializer() as ObjectLiteralExpression,\n        )\n      }\n      else if (\n        property.getInitializer()?.isKind(SyntaxKind.ArrayLiteralExpression)\n      ) {\n        result[name] = parseArrayLiteralExpression(\n          property.getInitializer() as ArrayLiteralExpression,\n        )\n      }\n      else {\n        result[name] = parseValue(property.getInitializer())\n      }\n    }\n  }\n  return result\n}\n\nfunction parseArrayLiteralExpression(node: ArrayLiteralExpression): any[] {\n  const result: any[] = []\n  for (const element of node.getElements()) {\n    if (element.isKind(SyntaxKind.ObjectLiteralExpression)) {\n      result.push(\n        parseObjectLiteralExpression(\n          element.asKindOrThrow(SyntaxKind.ObjectLiteralExpression),\n        ),\n      )\n    }\n    else if (element.isKind(SyntaxKind.ArrayLiteralExpression)) {\n      result.push(\n        parseArrayLiteralExpression(\n          element.asKindOrThrow(SyntaxKind.ArrayLiteralExpression),\n        ),\n      )\n    }\n    else {\n      result.push(parseValue(element))\n    }\n  }\n  return result\n}\n\nfunction parseValue(node: any): any {\n  switch (node.getKind()) {\n    case SyntaxKind.StringLiteral:\n      return node.getText()\n    case SyntaxKind.NumericLiteral:\n      return Number(node.getText())\n    case SyntaxKind.TrueKeyword:\n      return true\n    case SyntaxKind.FalseKeyword:\n      return false\n    case SyntaxKind.NullKeyword:\n      return null\n    case SyntaxKind.ArrayLiteralExpression:\n      return node.getElements().map(parseValue)\n    case SyntaxKind.ObjectLiteralExpression:\n      return parseObjectLiteralExpression(node)\n    default:\n      return node.getText()\n  }\n}\n\nexport function buildTailwindThemeColorsFromCssVars(\n  cssVars: Record<string, string>,\n) {\n  const result: Record<string, any> = {}\n\n  for (const key of Object.keys(cssVars)) {\n    const parts = key.split('-')\n    const colorName = parts[0]\n    const subType = parts.slice(1).join('-')\n\n    if (subType === '') {\n      if (typeof result[colorName] === 'object') {\n        result[colorName].DEFAULT = `hsl(var(--${key}))`\n      }\n      else {\n        result[colorName] = `hsl(var(--${key}))`\n      }\n    }\n    else {\n      if (typeof result[colorName] !== 'object') {\n        result[colorName] = { DEFAULT: `hsl(var(--${colorName}))` }\n      }\n      result[colorName][subType] = `hsl(var(--${key}))`\n    }\n  }\n\n  // Remove DEFAULT if it's not in the original cssVars\n  for (const [colorName, value] of Object.entries(result)) {\n    if (\n      typeof value === 'object'\n      && value.DEFAULT === `hsl(var(--${colorName}))`\n      && !(colorName in cssVars)\n    ) {\n      delete value.DEFAULT\n    }\n  }\n\n  return result\n}\n","import ora, { type Options } from 'ora'\n\nexport function spinner(\n  text: Options['text'],\n  options?: {\n    silent?: boolean\n  },\n) {\n  return ora({\n    text,\n    isSilent: options?.silent,\n  })\n}\n","import type { Config } from '@/src/utils/get-config'\nimport type {\n  registryItemFileSchema,\n} from '@/src/utils/registry/schema'\nimport { handleError } from '@/src/utils/handle-error'\nimport { logger } from '@/src/utils/logger'\nimport {\n  iconsSchema,\n  registryBaseColorSchema,\n  registryIndexSchema,\n  registryItemSchema,\n  registryResolvedItemsTreeSchema,\n  stylesSchema,\n} from '@/src/utils/registry/schema'\nimport { buildTailwindThemeColorsFromCssVars } from '@/src/utils/updaters/update-tailwind-config'\nimport deepmerge from 'deepmerge'\nimport { ofetch } from 'ofetch'\nimport path from 'pathe'\nimport { ProxyAgent } from 'undici'\nimport { z } from 'zod'\n\nconst REGISTRY_URL = process.env.REGISTRY_URL ?? 'https://next.shadcn-vue.com/r'\n\nconst agent = process.env.https_proxy\n  ? new ProxyAgent(process.env.https_proxy)\n  : undefined\n\nexport async function getRegistryIndex() {\n  try {\n    const [result] = await fetchRegistry(['index.json'])\n\n    return registryIndexSchema.parse(result)\n  }\n  catch (error) {\n    logger.error('\\n')\n    handleError(error)\n  }\n}\n\nexport async function getRegistryStyles() {\n  try {\n    const [result] = await fetchRegistry(['styles/index.json'])\n\n    return stylesSchema.parse(result)\n  }\n  catch (error) {\n    logger.error('\\n')\n    handleError(error)\n    return []\n  }\n}\n\nexport async function getRegistryIcons() {\n  try {\n    const [result] = await fetchRegistry(['icons/index.json'])\n    return iconsSchema.parse(result)\n  }\n  catch (error) {\n    handleError(error)\n    return {}\n  }\n}\n\nexport async function getRegistryItem(name: string, style: string) {\n  try {\n    const [result] = await fetchRegistry([\n      isUrl(name) ? name : `styles/${style}/${name}.json`,\n    ])\n\n    return registryItemSchema.parse(result)\n  }\n  catch (error) {\n    logger.break()\n    handleError(error)\n    return null\n  }\n}\n\nexport async function getRegistryBaseColors() {\n  return [\n    {\n      name: 'neutral',\n      label: 'Neutral',\n    },\n    {\n      name: 'gray',\n      label: 'Gray',\n    },\n    {\n      name: 'zinc',\n      label: 'Zinc',\n    },\n    {\n      name: 'stone',\n      label: 'Stone',\n    },\n    {\n      name: 'slate',\n      label: 'Slate',\n    },\n  ]\n}\n\nexport async function getRegistryBaseColor(baseColor: string) {\n  try {\n    const [result] = await fetchRegistry([`colors/${baseColor}.json`])\n\n    return registryBaseColorSchema.parse(result)\n  }\n  catch (error) {\n    handleError(error)\n  }\n}\n\nexport async function resolveTree(\n  index: z.infer<typeof registryIndexSchema>,\n  names: string[],\n) {\n  const tree: z.infer<typeof registryIndexSchema> = []\n\n  for (const name of names) {\n    const entry = index.find(entry => entry.name === name)\n\n    if (!entry) {\n      continue\n    }\n\n    tree.push(entry)\n\n    if (entry.registryDependencies) {\n      const dependencies = await resolveTree(index, entry.registryDependencies)\n      tree.push(...dependencies)\n    }\n  }\n\n  return tree.filter(\n    (component, index, self) =>\n      self.findIndex(c => c.name === component.name) === index,\n  )\n}\n\nexport async function fetchTree(\n  style: string,\n  tree: z.infer<typeof registryIndexSchema>,\n) {\n  try {\n    const paths = tree.map(item => `styles/${style}/${item.name}.json`)\n    const result = await fetchRegistry(paths)\n    return registryIndexSchema.parse(result)\n  }\n  catch (error) {\n    handleError(error)\n  }\n}\n\nexport async function getItemTargetPath(\n  config: Config,\n  item: Pick<z.infer<typeof registryItemSchema>, 'type'>,\n  override?: string,\n) {\n  if (override) {\n    return override\n  }\n\n  if (item.type === 'registry:ui') {\n    return config.resolvedPaths.ui ?? config.resolvedPaths.components\n  }\n\n  const [parent, type] = item.type?.split(':') ?? []\n  if (!(parent in config.resolvedPaths)) {\n    return null\n  }\n\n  return path.join(\n    config.resolvedPaths[parent as keyof typeof config.resolvedPaths],\n    type,\n  )\n}\n\nasync function fetchRegistry(paths: string[]) {\n  try {\n    const results = await Promise.all(\n      paths.map(async (path) => {\n        const url = getRegistryUrl(path)\n        const response = await ofetch(url, { dispatcher: agent, parseResponse: JSON.parse })\n          .catch((error) => {\n            throw new Error(error.data)\n          })\n\n        return response\n      }),\n    )\n\n    return results\n  }\n  catch (error) {\n    logger.error('\\n')\n    handleError(error)\n    return []\n  }\n}\n\nexport function getRegistryItemFileTargetPath(\n  file: z.infer<typeof registryItemFileSchema>,\n  config: Config,\n  override?: string,\n) {\n  if (override) {\n    return override\n  }\n\n  if (file.type === 'registry:ui') {\n    // For UI component we place them in folder\n    const folder = file.path.split('/')[1]\n    return path.join(config.resolvedPaths.ui, folder)\n  }\n\n  if (file.type === 'registry:lib') {\n    return config.resolvedPaths.lib\n  }\n\n  if (file.type === 'registry:block' || file.type === 'registry:component') {\n    return config.resolvedPaths.components\n  }\n\n  if (file.type === 'registry:hook') {\n    return config.resolvedPaths.composables\n  }\n\n  // TODO: we put this in components for now.\n  // We should move this to pages as per framework.\n  if (file.type === 'registry:page') {\n    return config.resolvedPaths.components\n  }\n\n  return config.resolvedPaths.components\n}\n\nexport async function registryResolveItemsTree(\n  names: z.infer<typeof registryItemSchema>['name'][],\n  config: Config,\n) {\n  try {\n    const index = await getRegistryIndex()\n    if (!index) {\n      return null\n    }\n\n    // If we're resolving the index, we want it to go first.\n    if (names.includes('index')) {\n      names.unshift('index')\n    }\n\n    const registryDependencies: Set<string> = new Set()\n    for (const name of names) {\n      const itemRegistryDependencies = await resolveRegistryDependencies(\n        name,\n        config,\n      )\n      itemRegistryDependencies.forEach(dep => registryDependencies.add(dep))\n    }\n\n    const uniqueRegistryDependencies = Array.from(registryDependencies)\n    const result = await fetchRegistry(uniqueRegistryDependencies)\n    const payload = z.array(registryItemSchema).parse(result)\n\n    if (!payload) {\n      return null\n    }\n\n    // If we're resolving the index, we want to fetch\n    // the theme item if a base color is provided.\n    // We do this for index only.\n    // Other components will ship with their theme tokens.\n    if (names.includes('index')) {\n      if (config.tailwind.baseColor) {\n        const theme = await registryGetTheme(config.tailwind.baseColor, config)\n        if (theme) {\n          payload.unshift(theme)\n        }\n      }\n    }\n\n    let tailwind = {}\n    payload.forEach((item) => {\n      tailwind = deepmerge(tailwind, item.tailwind ?? {})\n    })\n\n    let cssVars = {}\n    payload.forEach((item) => {\n      cssVars = deepmerge(cssVars, item.cssVars ?? {})\n    })\n\n    let docs = ''\n    payload.forEach((item) => {\n      if (item.docs) {\n        docs += `${item.docs}\\n`\n      }\n    })\n\n    return registryResolvedItemsTreeSchema.parse({\n      dependencies: Array.from(new Set(payload.flatMap(item => item.dependencies ?? []))),\n      devDependencies: Array.from(new Set(payload.flatMap(item => item.devDependencies ?? []))),\n      files: deepmerge.all(payload.map(item => item.files ?? [])),\n      tailwind,\n      cssVars,\n      docs,\n    })\n  }\n  catch (error) {\n    handleError(error)\n    return null\n  }\n}\n\nasync function resolveRegistryDependencies(\n  url: string,\n  config: Config,\n): Promise<string[]> {\n  const visited = new Set<string>()\n  const payload: string[] = []\n\n  async function resolveDependencies(itemUrl: string) {\n    const url = getRegistryUrl(\n      isUrl(itemUrl) ? itemUrl : `styles/${config.style}/${itemUrl}.json`,\n    )\n\n    if (visited.has(url)) {\n      return\n    }\n\n    visited.add(url)\n\n    try {\n      const [result] = await fetchRegistry([url])\n      const item = registryItemSchema.parse(result)\n      payload.push(url)\n\n      if (item.registryDependencies) {\n        for (const dependency of item.registryDependencies) {\n          await resolveDependencies(dependency)\n        }\n      }\n    }\n    catch (error) {\n      console.error(\n        `Error fetching or parsing registry item at ${itemUrl}:`,\n        error,\n      )\n    }\n  }\n\n  await resolveDependencies(url)\n  return Array.from(new Set(payload))\n}\n\nexport async function registryGetTheme(name: string, config: Config) {\n  const baseColor = await getRegistryBaseColor(name)\n  if (!baseColor) {\n    return null\n  }\n\n  // TODO: Move this to the registry i.e registry:theme.\n  const theme = {\n    name,\n    type: 'registry:theme',\n    tailwind: {\n      config: {\n        theme: {\n          extend: {\n            borderRadius: {\n              lg: 'var(--radius)',\n              md: 'calc(var(--radius) - 2px)',\n              sm: 'calc(var(--radius) - 4px)',\n            },\n            colors: {},\n          },\n        },\n      },\n    },\n    cssVars: {\n      light: {\n        radius: '0.5rem',\n      },\n      dark: {},\n    },\n  } satisfies z.infer<typeof registryItemSchema>\n\n  if (config.tailwind.cssVariables) {\n    theme.tailwind.config.theme.extend.colors = {\n      ...theme.tailwind.config.theme.extend.colors,\n      ...buildTailwindThemeColorsFromCssVars(baseColor.cssVars.dark),\n    }\n    theme.cssVars = {\n      light: {\n        ...baseColor.cssVars.light,\n        ...theme.cssVars.light,\n      },\n      dark: {\n        ...baseColor.cssVars.dark,\n        ...theme.cssVars.dark,\n      },\n    }\n  }\n\n  return theme\n}\n\nfunction getRegistryUrl(path: string) {\n  if (isUrl(path)) {\n    // If the url contains /chat/b/, we assume it's the v0 registry.\n    // We need to add the /json suffix if it's missing.\n    const url = new URL(path)\n    if (url.pathname.match(/\\/chat\\/b\\//) && !url.pathname.endsWith('/json')) {\n      url.pathname = `${url.pathname}/json`\n    }\n\n    return url.toString()\n  }\n\n  return `${REGISTRY_URL}/${path}`\n}\n\nfunction isUrl(path: string) {\n  try {\n    // eslint-disable-next-line no-new\n    new URL(path)\n    return true\n  }\n  catch (error) {\n    return false\n  }\n}\n","import type { Config } from '@/src/utils/get-config'\nimport type { registryItemCssVarsSchema } from '@/src/utils/registry/schema'\nimport type Root from 'postcss/lib/root'\nimport type Rule from 'postcss/lib/rule'\nimport type { z } from 'zod'\nimport { promises as fs } from 'node:fs'\nimport { highlighter } from '@/src/utils/highlighter'\nimport { spinner } from '@/src/utils/spinner'\nimport path from 'pathe'\nimport postcss from 'postcss'\nimport AtRule from 'postcss/lib/at-rule'\n\nexport async function updateCssVars(\n  cssVars: z.infer<typeof registryItemCssVarsSchema> | undefined,\n  config: Config,\n  options: {\n    cleanupDefaultNextStyles?: boolean\n    silent?: boolean\n  },\n) {\n  if (\n    !cssVars\n    || !Object.keys(cssVars).length\n    || !config.resolvedPaths.tailwindCss\n  ) {\n    return\n  }\n\n  options = {\n    cleanupDefaultNextStyles: false,\n    silent: false,\n    ...options,\n  }\n  const cssFilepath = config.resolvedPaths.tailwindCss\n  const cssFilepathRelative = path.relative(\n    config.resolvedPaths.cwd,\n    cssFilepath,\n  )\n  const cssVarsSpinner = spinner(\n    `Updating ${highlighter.info(cssFilepathRelative)}`,\n    {\n      silent: options.silent,\n    },\n  ).start()\n  const raw = await fs.readFile(cssFilepath, 'utf8')\n  const output = await transformCssVars(raw, cssVars, config, {\n    cleanupDefaultNextStyles: options.cleanupDefaultNextStyles,\n  })\n  await fs.writeFile(cssFilepath, output, 'utf8')\n  cssVarsSpinner.succeed()\n}\n\nexport async function transformCssVars(\n  input: string,\n  cssVars: z.infer<typeof registryItemCssVarsSchema>,\n  config: Config,\n  options?: {\n    cleanupDefaultNextStyles?: boolean\n  },\n) {\n  options = {\n    cleanupDefaultNextStyles: false,\n    ...options,\n  }\n\n  const plugins = [updateCssVarsPlugin(cssVars)]\n  if (options.cleanupDefaultNextStyles) {\n    plugins.push(cleanupDefaultNextStylesPlugin())\n  }\n\n  // Only add the base layer plugin if we're using css variables.\n  if (config.tailwind.cssVariables) {\n    plugins.push(updateBaseLayerPlugin())\n  }\n\n  const result = await postcss(plugins).process(input, {\n    from: undefined,\n  })\n\n  return result.css\n}\n\nfunction updateBaseLayerPlugin() {\n  return {\n    postcssPlugin: 'update-base-layer',\n    Once(root: Root) {\n      const requiredRules = [\n        { selector: '*', apply: 'border-border' },\n        { selector: 'body', apply: 'bg-background text-foreground' },\n      ]\n\n      let baseLayer = root.nodes.find(\n        (node): node is AtRule =>\n          node.type === 'atrule'\n          && node.name === 'layer'\n          && node.params === 'base'\n          && requiredRules.every(({ selector, apply }) =>\n            node.nodes?.some(\n              (rule): rule is Rule =>\n                rule.type === 'rule'\n                && rule.selector === selector\n                && rule.nodes.some(\n                  (applyRule): applyRule is AtRule =>\n                    applyRule.type === 'atrule'\n                    && applyRule.name === 'apply'\n                    && applyRule.params === apply,\n                ),\n            ),\n          ),\n      ) as AtRule | undefined\n\n      if (!baseLayer) {\n        baseLayer = postcss.atRule({\n          name: 'layer',\n          params: 'base',\n          raws: { semicolon: true, between: ' ', before: '\\n' },\n        })\n        root.append(baseLayer)\n      }\n\n      requiredRules.forEach(({ selector, apply }) => {\n        const existingRule = baseLayer?.nodes?.find(\n          (node): node is Rule =>\n            node.type === 'rule' && node.selector === selector,\n        )\n\n        if (!existingRule) {\n          baseLayer?.append(\n            postcss.rule({\n              selector,\n              nodes: [\n                postcss.atRule({\n                  name: 'apply',\n                  params: apply,\n                  raws: { semicolon: true, before: '\\n    ' },\n                }),\n              ],\n              raws: { semicolon: true, between: ' ', before: '\\n  ' },\n            }),\n          )\n        }\n      })\n    },\n  }\n}\n\nfunction updateCssVarsPlugin(\n  cssVars: z.infer<typeof registryItemCssVarsSchema>,\n) {\n  return {\n    postcssPlugin: 'update-css-vars',\n    Once(root: Root) {\n      let baseLayer = root.nodes.find(\n        node =>\n          node.type === 'atrule'\n          && node.name === 'layer'\n          && node.params === 'base',\n      ) as AtRule | undefined\n\n      if (!(baseLayer instanceof AtRule)) {\n        baseLayer = postcss.atRule({\n          name: 'layer',\n          params: 'base',\n          nodes: [],\n          raws: {\n            semicolon: true,\n            before: '\\n',\n            between: ' ',\n          },\n        })\n        root.append(baseLayer)\n      }\n\n      if (baseLayer !== undefined) {\n        // Add variables for each key in cssVars\n        Object.entries(cssVars).forEach(([key, vars]) => {\n          const selector = key === 'light' ? ':root' : `.${key}`\n          // TODO: Fix typecheck.\n          addOrUpdateVars(baseLayer as AtRule, selector, vars)\n        })\n      }\n    },\n  }\n}\n\nfunction removeConflictVars(root: Rule | Root) {\n  const rootRule = root.nodes.find(\n    (node): node is Rule => node.type === 'rule' && node.selector === ':root',\n  )\n\n  if (rootRule) {\n    const propsToRemove = ['--background', '--foreground']\n\n    rootRule.nodes\n      .filter(\n        (node): node is postcss.Declaration =>\n          node.type === 'decl' && propsToRemove.includes(node.prop),\n      )\n      .forEach(node => node.remove())\n\n    if (rootRule.nodes.length === 0) {\n      rootRule.remove()\n    }\n  }\n}\n\nfunction cleanupDefaultNextStylesPlugin() {\n  return {\n    postcssPlugin: 'cleanup-default-next-styles',\n    Once(root: Root) {\n      const bodyRule = root.nodes.find(\n        (node): node is Rule => node.type === 'rule' && node.selector === 'body',\n      )\n      if (bodyRule) {\n        // Remove color from the body node.\n        bodyRule.nodes\n          .find(\n            (node): node is postcss.Declaration =>\n              node.type === 'decl'\n              && node.prop === 'color'\n              && ['rgb(var(--foreground-rgb))', 'var(--foreground)'].includes(\n                node.value,\n              ),\n          )\n          ?.remove()\n\n        // Remove background: linear-gradient.\n        bodyRule.nodes\n          .find((node): node is postcss.Declaration => {\n            return (\n              node.type === 'decl'\n              && node.prop === 'background'\n              // This is only going to run on create project, so all good.\n              && (node.value.startsWith('linear-gradient')\n                || node.value === 'var(--background)')\n            )\n          })\n          ?.remove()\n\n        // If the body rule is empty, remove it.\n        if (bodyRule.nodes.length === 0) {\n          bodyRule.remove()\n        }\n      }\n\n      removeConflictVars(root)\n\n      const darkRootRule = root.nodes.find(\n        (node): node is Rule =>\n          node.type === 'atrule'\n          && node.params === '(prefers-color-scheme: dark)',\n      )\n\n      if (darkRootRule) {\n        removeConflictVars(darkRootRule)\n        if (darkRootRule.nodes.length === 0) {\n          darkRootRule.remove()\n        }\n      }\n    },\n  }\n}\n\nfunction addOrUpdateVars(\n  baseLayer: AtRule,\n  selector: string,\n  vars: Record<string, string>,\n) {\n  let ruleNode = baseLayer.nodes?.find(\n    (node): node is Rule => node.type === 'rule' && node.selector === selector,\n  )\n\n  if (!ruleNode) {\n    if (Object.keys(vars).length > 0) {\n      ruleNode = postcss.rule({\n        selector,\n        raws: { between: ' ', before: '\\n  ' },\n      })\n      baseLayer.append(ruleNode)\n    }\n  }\n\n  Object.entries(vars).forEach(([key, value]) => {\n    const prop = `--${key.replace(/^--/, '')}`\n    const newDecl = postcss.decl({\n      prop,\n      value,\n      raws: { semicolon: true },\n    })\n\n    const existingDecl = ruleNode?.nodes.find(\n      (node): node is postcss.Declaration =>\n        node.type === 'decl' && node.prop === prop,\n    )\n\n    existingDecl ? existingDecl.replaceWith(newDecl) : ruleNode?.append(newDecl)\n  })\n}\n","import type { Config } from '@/src/utils/get-config'\nimport type { RegistryItem } from '@/src/utils/registry/schema'\nimport { spinner } from '@/src/utils/spinner'\nimport { addDependency } from 'nypm'\n\nexport async function updateDependencies(\n  dependencies: RegistryItem['dependencies'],\n  config: Config,\n  options: {\n    silent?: boolean\n  },\n) {\n  dependencies = Array.from(new Set(dependencies))\n  if (!dependencies?.length) {\n    return\n  }\n\n  options = {\n    silent: false,\n    ...options,\n  }\n\n  const dependenciesSpinner = spinner(`Installing dependencies.`, { silent: options.silent })?.start()\n  dependenciesSpinner?.start()\n\n  await addDependency(dependencies, { cwd: config.resolvedPaths.cwd })\n  dependenciesSpinner?.succeed()\n}\n","import type { Config } from '@/src/utils/get-config'\nimport type { RegistryItem } from '@/src/utils/registry/schema'\nimport { existsSync, promises as fs } from 'node:fs'\nimport { getProjectInfo } from '@/src/utils/get-project-info'\nimport { highlighter } from '@/src/utils/highlighter'\nimport { logger } from '@/src/utils/logger'\nimport {\n  getRegistryBaseColor,\n  getRegistryItemFileTargetPath,\n} from '@/src/utils/registry'\nimport { spinner } from '@/src/utils/spinner'\nimport { transform } from '@/src/utils/transformers'\nimport path, { basename, dirname } from 'pathe'\n// import { transformIcons } from '@/src/utils/transformers/transform-icons'\nimport prompts from 'prompts'\n\nexport function resolveTargetDir(\n  projectInfo: Awaited<ReturnType<typeof getProjectInfo>>,\n  config: Config,\n  target: string,\n) {\n  if (target.startsWith('~/')) {\n    return path.join(config.resolvedPaths.cwd, target.replace('~/', ''))\n  }\n  return path.join(config.resolvedPaths.cwd, target)\n  // return projectInfo?.isSrcDir\n  //   ? path.join(config.resolvedPaths.cwd, 'src', target)\n  //   : path.join(config.resolvedPaths.cwd, target)\n}\n\nexport async function updateFiles(\n  files: RegistryItem['files'],\n  config: Config,\n  options: {\n    overwrite?: boolean\n    force?: boolean\n    silent?: boolean\n  },\n) {\n  if (!files?.length) {\n    return\n  }\n  options = {\n    overwrite: false,\n    force: false,\n    silent: false,\n    ...options,\n  }\n  const filesCreatedSpinner = spinner(`Updating files.`, {\n    silent: options.silent,\n  })?.start()\n\n  const [projectInfo, baseColor] = await Promise.all([\n    getProjectInfo(config.resolvedPaths.cwd),\n    getRegistryBaseColor(config.tailwind.baseColor),\n  ])\n\n  const filesCreated = []\n  const filesUpdated = []\n  const folderSkipped = new Map<string, boolean>()\n  const filesSkipped = []\n\n  for (const file of files) {\n    if (!file.content) {\n      continue\n    }\n\n    let targetDir = getRegistryItemFileTargetPath(file, config)\n    const fileName = basename(file.path)\n    let filePath = path.join(targetDir, fileName)\n\n    if (file.target) {\n      filePath = resolveTargetDir(projectInfo, config, file.target)\n      targetDir = path.dirname(filePath)\n    }\n\n    if (!config.typescript) {\n      filePath = filePath.replace(/\\.ts?$/, match => '.js')\n    }\n\n    const existingFile = existsSync(filePath)\n\n    // Check for existing folder in UI component only\n    if (file.type === 'registry:ui') {\n      const folderName = basename(dirname(filePath))\n      const existingFolder = existsSync(dirname(filePath))\n\n      if (!existingFolder) {\n        folderSkipped.set(folderName, false)\n      }\n\n      if (!folderSkipped.has(folderName)) {\n        filesCreatedSpinner.stop()\n        const { overwrite } = await prompts({\n          type: 'confirm',\n          name: 'overwrite',\n          message: `The folder ${highlighter.info(folderName)} already exists. Would you like to overwrite?`,\n          initial: false,\n        })\n        folderSkipped.set(folderName, !overwrite)\n        filesCreatedSpinner?.start()\n      }\n\n      if (folderSkipped.get(folderName) === true) {\n        filesSkipped.push(path.relative(config.resolvedPaths.cwd, filePath))\n        continue\n      }\n    }\n    else {\n      if (existingFile && !options.overwrite) {\n        filesCreatedSpinner.stop()\n        const { overwrite } = await prompts({\n          type: 'confirm',\n          name: 'overwrite',\n          message: `The file ${highlighter.info(\n            fileName,\n          )} already exists. Would you like to overwrite?`,\n          initial: false,\n        })\n\n        if (!overwrite) {\n          filesSkipped.push(path.relative(config.resolvedPaths.cwd, filePath))\n          continue\n        }\n        filesCreatedSpinner?.start()\n      }\n    }\n\n    // Create the target directory if it doesn't exist.\n    if (!existsSync(targetDir)) {\n      await fs.mkdir(targetDir, { recursive: true })\n    }\n\n    // Run our transformers.\n    const content = await transform({\n      filename: file.path,\n      raw: file.content,\n      config,\n      baseColor,\n    })\n\n    await fs.writeFile(filePath, content, 'utf-8')\n    existingFile\n      ? filesUpdated.push(path.relative(config.resolvedPaths.cwd, filePath))\n      : filesCreated.push(path.relative(config.resolvedPaths.cwd, filePath))\n  }\n\n  const hasUpdatedFiles = filesCreated.length || filesUpdated.length\n  if (!hasUpdatedFiles && !filesSkipped.length) {\n    filesCreatedSpinner?.info('No files updated.')\n  }\n\n  if (filesCreated.length) {\n    filesCreatedSpinner?.succeed(\n      `Created ${filesCreated.length} ${\n        filesCreated.length === 1 ? 'file' : 'files'\n      }:`,\n    )\n    if (!options.silent) {\n      for (const file of filesCreated) {\n        logger.log(`  - ${file}`)\n      }\n    }\n  }\n  else {\n    filesCreatedSpinner?.stop()\n  }\n\n  if (filesUpdated.length) {\n    spinner(\n      `Updated ${filesUpdated.length} ${\n        filesUpdated.length === 1 ? 'file' : 'files'\n      }:`,\n      {\n        silent: options.silent,\n      },\n    )?.info()\n    if (!options.silent) {\n      for (const file of filesUpdated) {\n        logger.log(`  - ${file}`)\n      }\n    }\n  }\n\n  if (filesSkipped.length) {\n    spinner(\n      `Skipped ${filesSkipped.length} ${\n        filesUpdated.length === 1 ? 'file' : 'files'\n      }:`,\n      {\n        silent: options.silent,\n      },\n    )?.info()\n    if (!options.silent) {\n      for (const file of filesSkipped) {\n        logger.log(`  - ${file}`)\n      }\n    }\n  }\n\n  if (!options.silent) {\n    logger.break()\n  }\n}\n","export const FRAMEWORKS = {\n  vite: {\n    name: 'vite',\n    label: 'Vite',\n    links: {\n      installation: 'https://shadcn-vue.com/docs/installation/vite',\n      tailwind: 'https://tailwindcss.com/docs/guides/vite',\n    },\n  },\n  nuxt: {\n    name: 'nuxt',\n    label: 'Nuxt',\n    links: {\n      installation: 'https://shadcn-vue.com/docs/installation/nuxt',\n      tailwind: 'https://tailwindcss.com/docs/guides/nuxtjs',\n    },\n  },\n  astro: {\n    name: 'astro',\n    label: 'Astro',\n    links: {\n      installation: 'https://shadcn-vue.com/docs/installation/astro',\n      tailwind: 'https://tailwindcss.com/docs/guides/astro',\n    },\n  },\n  laravel: {\n    name: 'laravel',\n    label: 'Laravel',\n    links: {\n      installation: 'https://shadcn-vue.com/docs/installation/laravel',\n      tailwind: 'https://tailwindcss.com/docs/guides/laravel',\n    },\n  },\n} as const\n\nexport type Framework = (typeof FRAMEWORKS)[keyof typeof FRAMEWORKS]\n","import { createPathsMatcher, type TsConfigResult } from 'get-tsconfig'\n\nexport function resolveImport(importPath: string, config: TsConfigResult) {\n  const matcher = createPathsMatcher(config)\n  if (matcher === null) {\n    return\n  }\n  const paths = matcher(importPath)\n  return paths[0]\n}\n","import { resolveImport } from '@/src/utils/resolve-import'\nimport { loadConfig as c12LoadConfig } from 'c12'\nimport { getTsconfig } from 'get-tsconfig'\nimport path from 'pathe'\nimport { z } from 'zod'\nimport { highlighter } from './highlighter'\n\n/** @deprecated */\nexport const TAILWIND_CSS_PATH = {\n  nuxt: 'assets/css/tailwind.css',\n  vite: 'src/assets/index.css',\n  laravel: 'resources/css/app.css',\n  astro: 'src/styles/globals.css',\n}\n\nexport const DEFAULT_STYLE = 'default'\nexport const DEFAULT_COMPONENTS = '@/components'\nexport const DEFAULT_UTILS = '@/lib/utils'\nexport const DEFAULT_TAILWIND_CSS = TAILWIND_CSS_PATH.nuxt // decide to go with Nuxt's as default\nexport const DEFAULT_TAILWIND_CONFIG = 'tailwind.config.js'\nexport const DEFAULT_TAILWIND_BASE_COLOR = 'slate'\nexport const DEFAULT_TYPESCRIPT_CONFIG = './tsconfig.json'\n\nexport const rawConfigSchema = z\n  .object({\n    $schema: z.string().optional(),\n    style: z.string(),\n    typescript: z.boolean().default(true),\n    tailwind: z.object({\n      config: z.string(),\n      css: z.string(),\n      baseColor: z.string(),\n      cssVariables: z.boolean().default(true),\n      prefix: z.string().default('').optional(),\n    }),\n    aliases: z.object({\n      components: z.string(),\n      composables: z.string().optional(),\n      utils: z.string(),\n      ui: z.string().optional(),\n      lib: z.string().optional(),\n    }),\n    iconLibrary: z.string().optional(),\n  })\n  .strict()\n\nexport type RawConfig = z.infer<typeof rawConfigSchema>\n\nexport const configSchema = rawConfigSchema.extend({\n  resolvedPaths: z.object({\n    cwd: z.string(),\n    tailwindConfig: z.string(),\n    tailwindCss: z.string(),\n    utils: z.string(),\n    components: z.string(),\n    composables: z.string(),\n    lib: z.string(),\n    ui: z.string(),\n  }),\n})\n\nexport type Config = z.infer<typeof configSchema>\n\nexport async function getConfig(cwd: string) {\n  const config = await getRawConfig(cwd)\n\n  if (!config) {\n    return null\n  }\n\n  // Set default icon library if not provided.\n  if (!config.iconLibrary) {\n    config.iconLibrary = config.style === 'new-york' ? 'radix' : 'lucide'\n  }\n\n  return await resolveConfigPaths(cwd, config)\n}\n\nexport function getTSConfig(cwd: string, tsconfigName: 'tsconfig.json' | 'jsconfig.json') {\n  const parsedConfig = getTsconfig(path.resolve(cwd, 'package.json'), tsconfigName)\n  if (parsedConfig === null) {\n    throw new Error(\n      `Failed to find ${highlighter.info(tsconfigName)}`,\n    )\n  }\n\n  return parsedConfig\n}\n\nexport async function resolveConfigPaths(cwd: string, config: RawConfig) {\n  // Read tsconfig.json.\n  const tsconfigType = config.typescript ? 'tsconfig.json' : 'jsconfig.json'\n  const tsConfig = getTSConfig(cwd, tsconfigType)\n\n  return configSchema.parse({\n    ...config,\n    resolvedPaths: {\n      cwd,\n      tailwindConfig: path.resolve(cwd, config.tailwind.config),\n      tailwindCss: path.resolve(cwd, config.tailwind.css),\n      utils: await resolveImport(config.aliases.utils, tsConfig),\n      components: await resolveImport(config.aliases.components, tsConfig),\n      ui: config.aliases.ui\n        ? await resolveImport(config.aliases.ui, tsConfig)\n        : path.resolve(\n            (await resolveImport(config.aliases.components, tsConfig))\n            ?? cwd,\n            'ui',\n          ),\n      // TODO: Make this configurable.\n      // For now, we assume the lib and hooks directories are one level up from the components directory.\n      lib: config.aliases.lib\n        ? await resolveImport(config.aliases.lib, tsConfig)\n        : path.resolve(\n            (await resolveImport(config.aliases.utils, tsConfig)) ?? cwd,\n            '..',\n          ),\n      composables: config.aliases.composables\n        ? await resolveImport(config.aliases.composables, tsConfig)\n        : path.resolve(\n            (await resolveImport(config.aliases.components, tsConfig))\n            ?? cwd,\n            '..',\n            'composables',\n          ),\n    },\n  })\n}\n\nexport async function getRawConfig(cwd: string): Promise<RawConfig | null> {\n  try {\n    const configResult = await c12LoadConfig({\n      name: 'components',\n      configFile: 'components',\n      cwd,\n    })\n\n    if (!configResult.config || Object.keys(configResult.config).length === 0)\n      return null\n\n    return rawConfigSchema.parse(configResult.config)\n  }\n  catch (error) {\n    throw new Error(`Invalid configuration found in ${cwd}/components.json.`)\n  }\n}\n","import type { PackageJson } from 'type-fest'\nimport fs from 'fs-extra'\nimport path from 'pathe'\n\nexport function getPackageInfo(\n  cwd: string = '',\n  shouldThrow: boolean = true,\n): PackageJson | null {\n  const packageJsonPath = path.join(cwd, 'package.json')\n\n  return fs.readJSONSync(packageJsonPath, {\n    throws: shouldThrow,\n  }) as PackageJson\n}\n","import type { Framework } from '@/src/utils/frameworks'\nimport type {\n  Config,\n  RawConfig,\n} from '@/src/utils/get-config'\nimport { FRAMEWORKS } from '@/src/utils/frameworks'\nimport {\n  getConfig,\n  getTSConfig,\n  resolveConfigPaths,\n} from '@/src/utils/get-config'\nimport { getPackageInfo } from '@/src/utils/get-package-info'\nimport fs from 'fs-extra'\nimport { parseTsconfig } from 'get-tsconfig'\nimport path from 'pathe'\nimport { glob } from 'tinyglobby'\nimport { z } from 'zod'\n\nexport interface ProjectInfo {\n  framework: Framework\n  typescript: boolean\n  tailwindConfigFile: string | null\n  tailwindCssFile: string | null\n  aliasPrefix: string | null\n}\n\nconst PROJECT_SHARED_IGNORE = [\n  '**/node_modules/**',\n  '.nuxt',\n  'public',\n  'dist',\n  'build',\n]\n\nconst TS_CONFIG_SCHEMA = z.object({\n  compilerOptions: z.object({\n    paths: z.record(z.string().or(z.array(z.string()))),\n  }),\n})\n\nexport async function getProjectInfo(cwd: string): Promise<ProjectInfo | null> {\n  const [\n    configFiles,\n    typescript,\n    tailwindConfigFile,\n    tailwindCssFile,\n    aliasPrefix,\n    packageJson,\n  ] = await Promise.all([\n    glob('**/{nuxt,vite,astro}.config.*|composer.json', {\n      cwd,\n      deep: 3,\n      ignore: PROJECT_SHARED_IGNORE,\n    }),\n    isTypeScriptProject(cwd),\n    getTailwindConfigFile(cwd),\n    getTailwindCssFile(cwd),\n    getTsConfigAliasPrefix(cwd),\n    getPackageInfo(cwd, false),\n  ])\n\n  const type: ProjectInfo = {\n    framework: FRAMEWORKS.vite, // TODO: Maybe add a manual installation\n    typescript,\n    tailwindConfigFile,\n    tailwindCssFile,\n    aliasPrefix,\n  }\n\n  // Nuxt.\n  if (configFiles.find(file => file.startsWith('nuxt.config.'))?.length) {\n    type.framework = FRAMEWORKS.nuxt\n    return type\n  }\n\n  // Astro.\n  if (configFiles.find(file => file.startsWith('astro.config.'))?.length) {\n    type.framework = FRAMEWORKS.astro\n    return type\n  }\n\n  // Laravel.\n  if (configFiles.find(file => file.startsWith('composer.json'))?.length) {\n    type.framework = FRAMEWORKS.laravel\n    return type\n  }\n\n  // Vite.\n  // We'll assume that it got caught by the Remix check above.\n  if (configFiles.find(file => file.startsWith('vite.config.'))?.length) {\n    type.framework = FRAMEWORKS.vite\n    return type\n  }\n\n  return type\n}\n\nexport async function getTailwindCssFile(cwd: string) {\n  const files = await glob(['**/*.css', '**/*.scss'], {\n    cwd,\n    deep: 5,\n    ignore: PROJECT_SHARED_IGNORE,\n  })\n\n  if (!files.length) {\n    return null\n  }\n\n  for (const file of files) {\n    const contents = await fs.readFile(path.resolve(cwd, file), 'utf8')\n    // Assume that if the file contains `@tailwind base` it's the main css file.\n    if (contents.includes('@tailwind base')) {\n      return file\n    }\n  }\n\n  return null\n}\n\nexport async function getTailwindConfigFile(cwd: string) {\n  const files = await glob('tailwind.config.*', {\n    cwd,\n    deep: 3,\n    ignore: PROJECT_SHARED_IGNORE,\n  })\n\n  if (!files.length) {\n    return null\n  }\n\n  return files[0]\n}\n\nexport async function getTsConfigAliasPrefix(cwd: string) {\n  const isTypescript = await isTypeScriptProject(cwd)\n  const tsconfigType = isTypescript ? 'tsconfig.json' : 'jsconfig.json'\n\n  const tsConfig = getTSConfig(cwd, tsconfigType)\n  const parsedTsConfig = parseTsconfig(tsConfig.path)\n\n  const aliasPaths = parsedTsConfig.compilerOptions?.paths ?? {}\n\n  // This assume that the first alias is the prefix.\n  for (const [alias, paths] of Object.entries(aliasPaths)) {\n    if (\n      paths.includes('./*')\n      || paths.includes('./src/*')\n      || paths.includes('./app/*')\n      || paths.includes('./resources/js/*') // Laravel.\n    ) {\n      const cleanAlias = alias.replace(/\\/\\*$/, '') ?? null\n      // handle Nuxt\n      return cleanAlias === '#build' ? '@' : cleanAlias\n    }\n  }\n\n  // Use the first alias as the prefix.\n  return Object.keys(aliasPaths)?.[0]?.replace(/\\/\\*$/, '') ?? null\n}\n\nexport async function isTypeScriptProject(cwd: string) {\n  const files = await glob('tsconfig.*', {\n    cwd,\n    deep: 1,\n    ignore: PROJECT_SHARED_IGNORE,\n  })\n\n  return files.length > 0\n}\n\nexport async function getTsConfig(cwd: string) {\n  for (const fallback of [\n    'tsconfig.json',\n    'tsconfig.web.json',\n    'tsconfig.app.json',\n  ]) {\n    const filePath = path.resolve(cwd, fallback)\n    if (!(await fs.pathExists(filePath))) {\n      continue\n    }\n\n    // We can't use fs.readJSON because it doesn't support comments.\n    const contents = await fs.readFile(filePath, 'utf8')\n    const cleanedContents = contents.replace(/\\/\\*\\s*\\*\\//g, '')\n    const result = TS_CONFIG_SCHEMA.safeParse(JSON.parse(cleanedContents))\n\n    if (result.error) {\n      continue\n    }\n\n    return result.data\n  }\n\n  return null\n}\n\nexport async function getProjectConfig(\n  cwd: string,\n  defaultProjectInfo: ProjectInfo | null = null,\n): Promise<Config | null> {\n  // Check for existing component config.\n  const [existingConfig, projectInfo] = await Promise.all([\n    getConfig(cwd),\n    !defaultProjectInfo\n      ? getProjectInfo(cwd)\n      : Promise.resolve(defaultProjectInfo),\n  ])\n\n  if (existingConfig) {\n    return existingConfig\n  }\n\n  if (\n    !projectInfo\n    || !projectInfo.tailwindConfigFile\n    || !projectInfo.tailwindCssFile\n  ) {\n    return null\n  }\n\n  const config: RawConfig = {\n    $schema: 'https://shadcn-vue.com/schema.json',\n    typescript: true,\n    style: 'new-york',\n    tailwind: {\n      config: projectInfo.tailwindConfigFile,\n      baseColor: 'zinc',\n      css: projectInfo.tailwindCssFile,\n      cssVariables: true,\n      prefix: '',\n    },\n    iconLibrary: 'lucide',\n    aliases: {\n      components: `${projectInfo.aliasPrefix}/components`,\n      ui: `${projectInfo.aliasPrefix}/components/ui`,\n      composables: `${projectInfo.aliasPrefix}/composables`,\n      lib: `${projectInfo.aliasPrefix}/lib`,\n      utils: `${projectInfo.aliasPrefix}/lib/utils`,\n    },\n  }\n\n  return await resolveConfigPaths(cwd, config)\n}\n","import type { registryBaseColorSchema } from '@/src/utils/registry/schema'\nimport type { CodemodPlugin } from 'vue-metamorph'\nimport type * as z from 'zod'\nimport type { TransformOpts } from '.'\n\nexport function transformCssVars(opts: TransformOpts): CodemodPlugin {\n  return {\n    type: 'codemod',\n    name: 'add prefix to tailwind classes',\n\n    transform({ scriptASTs, sfcAST, utils: { traverseScriptAST, traverseTemplateAST } }) {\n      let transformCount = 0\n      const { baseColor, config } = opts\n\n      if (config.tailwind?.cssVariables || !baseColor?.inlineColors)\n        return transformCount\n\n      for (const scriptAST of scriptASTs) {\n        traverseScriptAST(scriptAST, {\n          visitLiteral(path) {\n            if (path.parent.value.type !== 'ImportDeclaration' && typeof path.node.value === 'string') {\n            // mutate the node\n              path.node.value = applyColorMapping(path.node.value.replace(/\"/g, ''), baseColor.inlineColors)\n              transformCount++\n            }\n\n            return this.traverse(path)\n          },\n        })\n      }\n\n      if (sfcAST) {\n        traverseTemplateAST(sfcAST, {\n          enterNode(node) {\n            if (node.type === 'Literal' && typeof node.value === 'string') {\n              if (!['BinaryExpression', 'Property'].includes(node.parent?.type ?? '')) {\n                node.value = applyColorMapping(node.value.replace(/\"/g, ''), baseColor.inlineColors)\n                transformCount++\n              }\n            }\n            // handle class attribute without binding\n            else if (node.type === 'VLiteral' && typeof node.value === 'string') {\n              if (node.parent.key.name === 'class') {\n                node.value = `\"${applyColorMapping(node.value.replace(/\"/g, ''), baseColor.inlineColors)}\"`\n                transformCount++\n              }\n            }\n          },\n          leaveNode() {\n\n          },\n        })\n      }\n\n      return transformCount\n    },\n  }\n}\n\n// Splits a className into variant-name-alpha.\n// eg. hover:bg-primary-100 -> [hover, bg-primary, 100]\nexport function splitClassName(className: string): (string | null)[] {\n  if (!className.includes('/') && !className.includes(':'))\n    return [null, className, null]\n\n  const parts: (string | null)[] = []\n  // First we split to find the alpha.\n  const [rest, alpha] = className.split('/')\n\n  // Check if rest has a colon.\n  if (!rest.includes(':'))\n    return [null, rest, alpha]\n\n  // Next we split the rest by the colon.\n  const split = rest.split(':')\n\n  // We take the last item from the split as the name.\n  const name = split.pop()\n\n  // We glue back the rest of the split.\n  const variant = split.join(':')\n\n  // Finally we push the variant, name and alpha.\n  parts.push(variant ?? null, name ?? null, alpha ?? null)\n\n  return parts\n}\n\nconst PREFIXES = ['bg-', 'text-', 'border-', 'ring-offset-', 'ring-']\n\nexport function applyColorMapping(\n  input: string,\n  mapping: z.infer<typeof registryBaseColorSchema>['inlineColors'],\n) {\n  // Handle border classes.\n  if (input.includes(' border '))\n    input = input.replace(' border ', ' border border-border ')\n\n  const classNames = input.split(' ')\n  const lightMode = new Set<string>()\n  const darkMode = new Set<string>()\n  for (const className of classNames) {\n    const [variant, value, modifier] = splitClassName(className)\n    const prefix = PREFIXES.find(prefix => value?.startsWith(prefix))\n    if (!prefix) {\n      if (!lightMode.has(className))\n        lightMode.add(className)\n\n      continue\n    }\n\n    const needle = value?.replace(prefix, '')\n    if (needle && needle in mapping.light) {\n      lightMode.add(\n        [variant, `${prefix}${mapping.light[needle]}`]\n          .filter(Boolean)\n          .join(':') + (modifier ? `/${modifier}` : ''),\n      )\n\n      darkMode.add(\n        ['dark', variant, `${prefix}${mapping.dark[needle]}`]\n          .filter(Boolean)\n          .join(':') + (modifier ? `/${modifier}` : ''),\n      )\n      continue\n    }\n\n    if (!lightMode.has(className))\n      lightMode.add(className)\n  }\n\n  return [...Array.from(lightMode), ...Array.from(darkMode)].join(' ').trim()\n}\n","import type { CodemodPlugin } from 'vue-metamorph'\nimport type { TransformOpts } from '.'\n\nexport function transformImport(opts: TransformOpts): CodemodPlugin {\n  return {\n    type: 'codemod',\n    name: 'modify import based on user config',\n\n    transform({ scriptASTs, utils: { traverseScriptAST } }) {\n      const transformCount = 0\n      const { config } = opts\n\n      for (const scriptAST of scriptASTs) {\n        traverseScriptAST(scriptAST, {\n          visitImportDeclaration(path) {\n            if (typeof path.node.source.value === 'string') {\n              const sourcePath = path.node.source.value\n\n              // Replace @/registry/[style] with the components alias.\n              if (sourcePath.startsWith('@/registry/')) {\n                if (config.aliases.ui) {\n                  path.node.source.value = sourcePath.replace(/^@\\/registry\\/[^/]+\\/ui/, config.aliases.ui)\n                }\n                else {\n                  path.node.source.value = sourcePath.replace(/^@\\/registry\\/[^/]+/, config.aliases.components)\n                }\n              }\n\n              // Replace `import { cn } from \"@/lib/utils\"`\n              if (sourcePath === '@/lib/utils') {\n                const namedImports = path.node.specifiers?.map(node => node.local?.name ?? '') ?? []\n                // const namedImports = importDeclaration.getNamedImports()\n                const cnImport = namedImports.find(i => i === 'cn')\n                if (cnImport) {\n                  path.node.source.value = sourcePath.replace(/^@\\/lib\\/utils/, config.aliases.utils)\n                }\n              }\n            }\n            return this.traverse(path)\n          },\n        })\n      }\n\n      return transformCount\n    },\n  }\n}\n","import type { TransformOpts } from '.'\nimport { transform } from '@unovue/detypes'\n\nexport async function transformSFC(opts: TransformOpts) {\n  if (opts.config?.typescript)\n    return opts.raw\n\n  return await transformByDetype(opts.raw, opts.filename).then(res => res as string)\n}\n\nexport async function transformByDetype(content: string, filename: string) {\n  return await transform(content, filename, {\n    removeTsComments: true,\n    prettierOptions: {\n      proseWrap: 'never',\n    },\n  })\n}\n","import type { CodemodPlugin } from 'vue-metamorph'\nimport type { TransformOpts } from '.'\nimport { splitClassName } from './transform-css-vars'\n\nexport function transformTwPrefix(opts: TransformOpts): CodemodPlugin {\n  return {\n    type: 'codemod',\n    name: 'add prefix to tailwind classes',\n\n    transform({ scriptASTs, sfcAST, utils: { traverseScriptAST, traverseTemplateAST, astHelpers } }) {\n      let transformCount = 0\n      const { config } = opts\n\n      const CLASS_IDENTIFIER = ['class', 'classes']\n\n      if (!config.tailwind?.prefix)\n        return transformCount\n\n      for (const scriptAST of scriptASTs) {\n        traverseScriptAST(scriptAST, {\n          visitCallExpression(path) {\n            if (path.node.callee.type === 'Identifier' && path.node.callee.name === 'cva') {\n              const nodes = path.node.arguments\n              nodes.forEach((node) => {\n                // cva(base, ...)\n                if (node.type === 'Literal' && typeof node.value === 'string') {\n                  node.value = applyPrefix(node.value, config.tailwind.prefix)\n                  transformCount++\n                }\n\n                else if (node.type === 'ObjectExpression') {\n                  node.properties.forEach((node) => {\n                    // cva(..., { variants: { ... } })\n                    if (node.type === 'Property' && node.key.type === 'Identifier' && node.key.name === 'variants') {\n                      const nodes = astHelpers.findAll(node, { type: 'Literal' })\n                      nodes.forEach((node) => {\n                        if (typeof node.value === 'string') {\n                          node.value = applyPrefix(node.value, config.tailwind.prefix)\n                          transformCount++\n                        }\n                      })\n                    }\n                  })\n                }\n              })\n            }\n            return this.traverse(path)\n          },\n        })\n      }\n\n      if (sfcAST) {\n        traverseTemplateAST(sfcAST, {\n          enterNode(node) {\n            if (node.type === 'VAttribute' && node.key.type === 'VDirectiveKey') {\n              if (node.key.argument?.type === 'VIdentifier') {\n                if (CLASS_IDENTIFIER.includes(node.key.argument.name)) {\n                  const nodes = astHelpers.findAll(node, { type: 'Literal' })\n                  nodes.forEach((node) => {\n                    if (!['BinaryExpression', 'Property'].includes(node.parent?.type ?? '') && typeof node.value === 'string') {\n                      node.value = applyPrefix(node.value, config.tailwind.prefix)\n                      transformCount++\n                    }\n                  })\n                }\n              }\n            }\n            // handle class attribute without binding\n            else if (node.type === 'VLiteral' && typeof node.value === 'string') {\n              if (CLASS_IDENTIFIER.includes(node.parent.key.name)) {\n                node.value = `\"${applyPrefix(node.value.replace(/\"/g, ''), config.tailwind.prefix)}\"`\n                transformCount++\n              }\n            }\n          },\n          leaveNode() {\n\n          },\n        })\n      }\n\n      return transformCount\n    },\n  }\n}\n\nexport function applyPrefix(input: string, prefix: string = '') {\n  const classNames = input.split(' ')\n  const prefixed: string[] = []\n  for (const className of classNames) {\n    const [variant, value, modifier] = splitClassName(className)\n    if (variant) {\n      modifier\n        ? prefixed.push(`${variant}:${prefix}${value}/${modifier}`)\n        : prefixed.push(`${variant}:${prefix}${value}`)\n    }\n    else {\n      modifier\n        ? prefixed.push(`${prefix}${value}/${modifier}`)\n        : prefixed.push(`${prefix}${value}`)\n    }\n  }\n  return prefixed.join(' ')\n}\n\nexport function applyPrefixesCss(css: string, prefix: string) {\n  const lines = css.split('\\n')\n  for (const line of lines) {\n    if (line.includes('@apply')) {\n      const originalTWCls = line.replace('@apply', '').trim()\n      const prefixedTwCls = applyPrefix(originalTWCls, prefix)\n      css = css.replace(originalTWCls, prefixedTwCls)\n    }\n  }\n  return css\n}\n","import type { Config } from '@/src/utils/get-config'\nimport type { registryBaseColorSchema } from '@/src/utils/registry/schema'\nimport type * as z from 'zod'\nimport { getRegistryIcons } from '@/src/utils/registry'\nimport { transformCssVars } from '@/src/utils/transformers/transform-css-vars'\nimport { transformImport } from '@/src/utils/transformers/transform-import'\nimport { transformSFC } from '@/src/utils/transformers/transform-sfc'\nimport { transformTwPrefix } from '@/src/utils/transformers/transform-tw-prefix'\nimport { transform as metaTransform } from 'vue-metamorph'\nimport { transformIcons } from './transform-icons'\n\nexport interface TransformOpts {\n  filename: string\n  raw: string\n  config: Config\n  baseColor?: z.infer<typeof registryBaseColorSchema>\n}\n\nexport async function transform(opts: TransformOpts) {\n  const source = await transformSFC(opts)\n\n  const registryIcons = await getRegistryIcons()\n\n  return metaTransform(source, opts.filename, [\n    transformImport(opts),\n    transformCssVars(opts),\n    transformTwPrefix(opts),\n    transformIcons(opts, registryIcons),\n  ]).code\n}\n","export const ICON_LIBRARIES = {\n  lucide: {\n    name: 'lucide-vue-next',\n    package: 'lucide-vue-next',\n    import: 'lucide-vue-next',\n  },\n  radix: {\n    name: '@radix-icons/vue',\n    package: '@radix-icons/vue',\n    import: '@radix-icons/vue',\n  },\n}\n","import type { CodemodPlugin } from 'vue-metamorph'\nimport type { TransformOpts } from '.'\nimport { ICON_LIBRARIES } from '@/src/utils/icon-libraries'\n\n// Lucide is the default icon library in the registry.\nconst SOURCE_LIBRARY = 'lucide'\n\nexport function transformIcons(opts: TransformOpts, registryIcons: Record<string, Record<string, string>>): CodemodPlugin {\n  return {\n    type: 'codemod',\n    name: 'modify import of icon library on user config',\n\n    transform({ scriptASTs, sfcAST, utils: { traverseScriptAST, traverseTemplateAST } }) {\n      let transformCount = 0\n      const { config } = opts\n\n      // No transform if we cannot read the icon library.\n      if (!config.iconLibrary || !(config.iconLibrary in ICON_LIBRARIES)) {\n        return transformCount\n      }\n\n      const sourceLibrary = SOURCE_LIBRARY\n      const targetLibrary = config.iconLibrary\n\n      if (sourceLibrary === targetLibrary) {\n        return transformCount\n      }\n\n      // Map<orignalIcon, targetedIcon>\n      const targetedIconsMap: Map<string, string> = new Map()\n      for (const scriptAST of scriptASTs) {\n        traverseScriptAST(scriptAST, {\n\n          visitImportDeclaration(path) {\n            if (![ICON_LIBRARIES.radix.import, ICON_LIBRARIES.lucide.import].includes(`${path.node.source.value}`))\n              return this.traverse(path)\n\n            for (const specifier of path.node.specifiers ?? []) {\n              if (specifier.type === 'ImportSpecifier') {\n                const iconName = specifier.imported.name\n\n                const targetedIcon = registryIcons[iconName]?.[targetLibrary]\n\n                if (!targetedIcon || targetedIconsMap.has(targetedIcon)) {\n                  continue\n                }\n\n                targetedIconsMap.set(iconName, targetedIcon)\n                specifier.imported.name = targetedIcon\n              }\n            }\n\n            if (targetedIconsMap.size > 0)\n              path.node.source.value = ICON_LIBRARIES[targetLibrary as keyof typeof ICON_LIBRARIES].import\n\n            return this.traverse(path)\n          },\n        })\n\n        if (sfcAST) {\n          traverseTemplateAST(sfcAST, {\n            enterNode(node) {\n              if (node.type === 'VElement' && targetedIconsMap.has(node.rawName)) {\n                node.rawName = targetedIconsMap.get(node.rawName) ?? ''\n                transformCount++\n              }\n            },\n          })\n        }\n      }\n\n      return transformCount\n    },\n  }\n}\n","import type { Config } from '@/src/utils/get-config'\nimport { handleError } from '@/src/utils/handle-error'\nimport { logger } from '@/src/utils/logger'\nimport { registryResolveItemsTree } from '@/src/utils/registry'\nimport { spinner } from '@/src/utils/spinner'\nimport { updateCssVars } from '@/src/utils/updaters/update-css-vars'\nimport { updateDependencies } from '@/src/utils/updaters/update-dependencies'\nimport { updateFiles } from '@/src/utils/updaters/update-files'\nimport { updateTailwindConfig } from '@/src/utils/updaters/update-tailwind-config'\n\nexport async function addComponents(\n  components: string[],\n  config: Config,\n  options: {\n    overwrite?: boolean\n    silent?: boolean\n    isNewProject?: boolean\n  },\n) {\n  options = {\n    overwrite: false,\n    silent: false,\n    isNewProject: false,\n    ...options,\n  }\n\n  const registrySpinner = spinner(`Checking registry.`, {\n    silent: options.silent,\n  })?.start()\n  const tree = await registryResolveItemsTree(components, config)\n  if (!tree) {\n    registrySpinner?.fail()\n    return handleError(new Error('Failed to fetch components from registry.'))\n  }\n  registrySpinner?.succeed()\n\n  await updateTailwindConfig(tree.tailwind?.config, config, {\n    silent: options.silent,\n  })\n  await updateCssVars(tree.cssVars, config, {\n    cleanupDefaultNextStyles: options.isNewProject,\n    silent: options.silent,\n  })\n\n  await updateDependencies(tree.dependencies, config, {\n    silent: options.silent,\n  })\n  await updateFiles(tree.files, config, {\n    overwrite: options.overwrite,\n    silent: options.silent,\n  })\n\n  if (tree.docs) {\n    logger.info(tree.docs)\n  }\n}\n","import type { Config } from '@/src/utils/get-config'\nimport type { ObjectLiteralExpression } from 'ts-morph'\nimport { promises as fs } from 'node:fs'\nimport { highlighter } from '@/src/utils/highlighter'\nimport { spinner } from '@/src/utils/spinner'\nimport {\n  _createSourceFile,\n  _getQuoteChar,\n} from '@/src/utils/updaters/update-tailwind-config'\nimport path from 'pathe'\nimport { SyntaxKind } from 'ts-morph'\n\nexport async function updateTailwindContent(\n  content: string[],\n  config: Config,\n  options: {\n    silent?: boolean\n  },\n) {\n  if (!content) {\n    return\n  }\n\n  options = {\n    silent: false,\n    ...options,\n  }\n\n  const tailwindFileRelativePath = path.relative(\n    config.resolvedPaths.cwd,\n    config.resolvedPaths.tailwindConfig,\n  )\n  const tailwindSpinner = spinner(\n    `Updating ${highlighter.info(tailwindFileRelativePath)}`,\n    {\n      silent: options.silent,\n    },\n  ).start()\n  const raw = await fs.readFile(config.resolvedPaths.tailwindConfig, 'utf8')\n  const output = await transformTailwindContent(raw, content, config)\n  await fs.writeFile(config.resolvedPaths.tailwindConfig, output, 'utf8')\n  tailwindSpinner?.succeed()\n}\n\nexport async function transformTailwindContent(\n  input: string,\n  content: string[],\n  config: Config,\n) {\n  const sourceFile = await _createSourceFile(input, config)\n  // Find the object with content property.\n  // This is faster than traversing the default export.\n  // TODO: maybe we do need to traverse the default export?\n  const configObject = sourceFile\n    .getDescendantsOfKind(SyntaxKind.ObjectLiteralExpression)\n    .find(node =>\n      node\n        .getProperties()\n        .some(\n          property =>\n            property.isKind(SyntaxKind.PropertyAssignment)\n            && property.getName() === 'content',\n        ),\n    )\n\n  // We couldn't find the config object, so we return the input as is.\n  if (!configObject) {\n    return input\n  }\n\n  addTailwindConfigContent(configObject, content)\n\n  return sourceFile.getFullText()\n}\n\nasync function addTailwindConfigContent(\n  configObject: ObjectLiteralExpression,\n  content: string[],\n) {\n  const quoteChar = _getQuoteChar(configObject)\n\n  const existingProperty = configObject.getProperty('content')\n\n  if (!existingProperty) {\n    const newProperty = {\n      name: 'content',\n      initializer: `[${quoteChar}${content.join(\n        `${quoteChar}, ${quoteChar}`,\n      )}${quoteChar}]`,\n    }\n    configObject.addPropertyAssignment(newProperty)\n\n    return configObject\n  }\n\n  if (existingProperty.isKind(SyntaxKind.PropertyAssignment)) {\n    const initializer = existingProperty.getInitializer()\n\n    // If property is an array, append.\n    if (initializer?.isKind(SyntaxKind.ArrayLiteralExpression)) {\n      for (const contentItem of content) {\n        const newValue = `${quoteChar}${contentItem}${quoteChar}`\n\n        // Check if the array already contains the value.\n        if (\n          initializer\n            .getElements()\n            .map(element => element.getText())\n            .includes(newValue)\n        ) {\n          continue\n        }\n\n        initializer.addElement(newValue)\n      }\n    }\n\n    return configObject\n  }\n\n  return configObject\n}\n","export const MISSING_DIR_OR_EMPTY_PROJECT = '1'\nexport const EXISTING_CONFIG = '2'\nexport const MISSING_CONFIG = '3'\nexport const FAILED_CONFIG_READ = '4'\nexport const TAILWIND_NOT_CONFIGURED = '5'\nexport const IMPORT_ALIAS_MISSING = '6'\nexport const UNSUPPORTED_FRAMEWORK = '7'\nexport const COMPONENT_URL_NOT_FOUND = '8'\nexport const COMPONENT_URL_UNAUTHORIZED = '9'\nexport const COMPONENT_URL_FORBIDDEN = '10'\nexport const COMPONENT_URL_BAD_REQUEST = '11'\nexport const COMPONENT_URL_INTERNAL_SERVER_ERROR = '12'\n","import type { addOptionsSchema } from '@/src/commands/add'\nimport type { z } from 'zod'\nimport * as ERRORS from '@/src/utils/errors'\nimport { getConfig } from '@/src/utils/get-config'\nimport { highlighter } from '@/src/utils/highlighter'\nimport { logger } from '@/src/utils/logger'\nimport fs from 'fs-extra'\nimport path from 'pathe'\n\nexport async function preFlightAdd(options: z.infer<typeof addOptionsSchema>) {\n  const errors: Record<string, boolean> = {}\n\n  // Ensure target directory exists.\n  // Check for empty project. We assume if no package.json exists, the project is empty.\n  if (\n    !fs.existsSync(options.cwd)\n    || !fs.existsSync(path.resolve(options.cwd, 'package.json'))\n  ) {\n    errors[ERRORS.MISSING_DIR_OR_EMPTY_PROJECT] = true\n    return {\n      errors,\n      config: null,\n    }\n  }\n\n  // Check for existing components.json file.\n  if (!fs.existsSync(path.resolve(options.cwd, 'components.json'))) {\n    errors[ERRORS.MISSING_CONFIG] = true\n    return {\n      errors,\n      config: null,\n    }\n  }\n\n  try {\n    const config = await getConfig(options.cwd)\n\n    return {\n      errors,\n      config: config!,\n    }\n  }\n  catch (error) {\n    logger.break()\n    logger.error(\n      `An invalid ${highlighter.info(\n        'components.json',\n      )} file was found at ${highlighter.info(\n        options.cwd,\n      )}.\\nBefore you can add components, you must create a valid ${highlighter.info(\n        'components.json',\n      )} file by running the ${highlighter.info('init')} command.`,\n    )\n    logger.error(\n      `Learn more at ${highlighter.info(\n        'https://shadcn-vue.com/docs/components-json',\n      )}.`,\n    )\n    logger.break()\n    process.exit(1)\n  }\n}\n","import { runInit } from '@/src/commands/init'\nimport { preFlightAdd } from '@/src/preflights/preflight-add'\nimport { addComponents } from '@/src/utils/add-components'\nimport * as ERRORS from '@/src/utils/errors'\nimport { handleError } from '@/src/utils/handle-error'\nimport { highlighter } from '@/src/utils/highlighter'\nimport { logger } from '@/src/utils/logger'\nimport { getRegistryIndex } from '@/src/utils/registry'\nimport { Command } from 'commander'\nimport path from 'pathe'\nimport prompts from 'prompts'\nimport { z } from 'zod'\n\nexport const addOptionsSchema = z.object({\n  components: z.array(z.string()).optional(),\n  yes: z.boolean(),\n  overwrite: z.boolean(),\n  cwd: z.string(),\n  all: z.boolean(),\n  path: z.string().optional(),\n  silent: z.boolean(),\n  srcDir: z.boolean().optional(),\n})\n\nexport const add = new Command()\n  .name('add')\n  .description('add a component to your project')\n  .argument(\n    '[components...]',\n    'the components to add or a url to the component.',\n  )\n  .option('-y, --yes', 'skip confirmation prompt.', false)\n  .option('-o, --overwrite', 'overwrite existing files.', false)\n  .option(\n    '-c, --cwd <cwd>',\n    'the working directory. defaults to the current directory.',\n    process.cwd(),\n  )\n  .option('-a, --all', 'add all available components', false)\n  .option('-p, --path <path>', 'the path to add the component to.')\n  .option('-s, --silent', 'mute output.', false)\n  .option(\n    '--src-dir',\n    'use the src directory when creating a new project.',\n    false,\n  )\n  .action(async (components, opts) => {\n    try {\n      const options = addOptionsSchema.parse({\n        components,\n        cwd: path.resolve(opts.cwd),\n        ...opts,\n      })\n\n      // Confirm if user is installing themes.\n      // For now, we assume a theme is prefixed with \"theme-\".\n      const isTheme = options.components?.some(component =>\n        component.includes('theme-'),\n      )\n      if (!options.yes && isTheme) {\n        logger.break()\n        const { confirm } = await prompts({\n          type: 'confirm',\n          name: 'confirm',\n          message: highlighter.warn(\n            'You are about to install a new theme. \\nExisting CSS variables will be overwritten. Continue?',\n          ),\n        })\n        if (!confirm) {\n          logger.break()\n          logger.log('Theme installation cancelled.')\n          logger.break()\n          process.exit(1)\n        }\n      }\n\n      if (!options.components?.length) {\n        options.components = await promptForRegistryComponents(options)\n      }\n\n      let { errors, config } = await preFlightAdd(options)\n\n      // No components.json file. Prompt the user to run init.\n      if (errors[ERRORS.MISSING_CONFIG]) {\n        const { proceed } = await prompts({\n          type: 'confirm',\n          name: 'proceed',\n          message: `You need to create a ${highlighter.info(\n            'components.json',\n          )} file to add components. Proceed?`,\n          initial: true,\n        })\n\n        if (!proceed) {\n          logger.break()\n          process.exit(1)\n        }\n\n        config = await runInit({\n          cwd: options.cwd,\n          yes: true,\n          force: true,\n          defaults: false,\n          skipPreflight: false,\n          silent: true,\n          isNewProject: false,\n          srcDir: options.srcDir,\n        })\n      }\n\n      // if (errors[ERRORS.MISSING_DIR_OR_EMPTY_PROJECT]) {\n      //   const { projectPath } = await createProject({\n      //     cwd: options.cwd,\n      //     force: options.overwrite,\n      //     srcDir: options.srcDir,\n      //   })\n      //   if (!projectPath) {\n      //     logger.break()\n      //     process.exit(1)\n      //   }\n      //   options.cwd = projectPath\n\n      //   config = await runInit({\n      //     cwd: options.cwd,\n      //     yes: true,\n      //     force: true,\n      //     defaults: false,\n      //     skipPreflight: true,\n      //     silent: true,\n      //     isNewProject: true,\n      //     srcDir: options.srcDir,\n      //   })\n      // }\n\n      if (!config) {\n        throw new Error(\n          `Failed to read config at ${highlighter.info(options.cwd)}.`,\n        )\n      }\n\n      await addComponents(options.components, config, options)\n    }\n    catch (error) {\n      logger.break()\n      handleError(error)\n    }\n  })\n\nasync function promptForRegistryComponents(\n  options: z.infer<typeof addOptionsSchema>,\n) {\n  const registryIndex = await getRegistryIndex()\n  if (!registryIndex) {\n    logger.break()\n    handleError(new Error('Failed to fetch registry index.'))\n    return []\n  }\n\n  if (options.all) {\n    return registryIndex.map(entry => entry.name)\n  }\n\n  if (options.components?.length) {\n    return options.components\n  }\n\n  const { components } = await prompts({\n    type: 'multiselect',\n    name: 'components',\n    message: 'Which components would you like to add?',\n    hint: 'Space to select. A to toggle all. Enter to submit.',\n    instructions: false,\n    choices: registryIndex\n      .filter(entry => entry.type === 'registry:ui')\n      .map(entry => ({\n        title: entry.name,\n        value: entry.name,\n        selected: options.all ? true : options.components?.includes(entry.name),\n      })),\n  })\n\n  if (!components?.length) {\n    logger.warn('No components selected. Exiting.')\n    logger.info('')\n    process.exit(1)\n  }\n\n  const result = z.array(z.string()).safeParse(components)\n  if (!result.success) {\n    logger.error('')\n    handleError(new Error('Something went wrong. Please try again.'))\n    return []\n  }\n  return result.data\n}\n","import type { Config } from '@/src/utils/get-config'\nimport type { registryIndexSchema } from '@/src/utils/registry/schema'\nimport { existsSync, promises as fs } from 'node:fs'\nimport { getConfig } from '@/src/utils/get-config'\nimport { handleError } from '@/src/utils/handle-error'\nimport { highlighter } from '@/src/utils/highlighter'\nimport { logger } from '@/src/utils/logger'\nimport {\n  fetchTree,\n  getItemTargetPath,\n  getRegistryBaseColor,\n  getRegistryIndex,\n} from '@/src/utils/registry'\nimport { transform } from '@/src/utils/transformers'\nimport { Command } from 'commander'\nimport { type Change, diffLines } from 'diff'\nimport path from 'pathe'\nimport { z } from 'zod'\n\nconst updateOptionsSchema = z.object({\n  component: z.string().optional(),\n  yes: z.boolean(),\n  cwd: z.string(),\n  path: z.string().optional(),\n})\n\nexport const diff = new Command()\n  .name('diff')\n  .description('check for updates against the registry')\n  .argument('[component]', 'the component name')\n  .option('-y, --yes', 'skip confirmation prompt.', false)\n  .option(\n    '-c, --cwd <cwd>',\n    'the working directory. defaults to the current directory.',\n    process.cwd(),\n  )\n  .action(async (name, opts) => {\n    try {\n      const options = updateOptionsSchema.parse({\n        component: name,\n        ...opts,\n      })\n\n      const cwd = path.resolve(options.cwd)\n\n      if (!existsSync(cwd)) {\n        logger.error(`The path ${cwd} does not exist. Please try again.`)\n        process.exit(1)\n      }\n\n      const config = await getConfig(cwd)\n      if (!config) {\n        logger.warn(\n          `Configuration is missing. Please run ${highlighter.success(\n            `init`,\n          )} to create a components.json file.`,\n        )\n        process.exit(1)\n      }\n\n      const registryIndex = await getRegistryIndex()\n\n      if (!registryIndex) {\n        handleError(new Error('Failed to fetch registry index.'))\n        process.exit(1)\n      }\n\n      if (!options.component) {\n        const targetDir = config.resolvedPaths.components\n\n        // Find all components that exist in the project.\n        const projectComponents = registryIndex.filter((item) => {\n          for (const file of item.files ?? []) {\n            const filePath = path.resolve(\n              targetDir,\n              typeof file === 'string' ? file : file.path,\n            )\n            if (existsSync(filePath)) {\n              return true\n            }\n          }\n\n          return false\n        })\n\n        // Check for updates.\n        const componentsWithUpdates = []\n        for (const component of projectComponents) {\n          const changes = await diffComponent(component, config)\n          if (changes.length) {\n            componentsWithUpdates.push({\n              name: component.name,\n              changes,\n            })\n          }\n        }\n\n        if (!componentsWithUpdates.length) {\n          logger.info('No updates found.')\n          process.exit(0)\n        }\n\n        logger.info('The following components have updates available:')\n        for (const component of componentsWithUpdates) {\n          logger.info(`- ${component.name}`)\n          for (const change of component.changes) {\n            logger.info(`  - ${change.filePath}`)\n          }\n        }\n        logger.break()\n        logger.info(\n          `Run ${highlighter.success(`diff <component>`)} to see the changes.`,\n        )\n        process.exit(0)\n      }\n\n      // Show diff for a single component.\n      const component = registryIndex.find(\n        item => item.name === options.component,\n      )\n\n      if (!component) {\n        logger.error(\n          `The component ${highlighter.success(\n            options.component,\n          )} does not exist.`,\n        )\n        process.exit(1)\n      }\n\n      const changes = await diffComponent(component, config)\n\n      if (!changes.length) {\n        logger.info(`No updates found for ${options.component}.`)\n        process.exit(0)\n      }\n\n      for (const change of changes) {\n        logger.info(`- ${change.filePath}`)\n        await printDiff(change.patch)\n        logger.info('')\n      }\n    }\n    catch (error) {\n      handleError(error)\n    }\n  })\n\nasync function diffComponent(\n  component: z.infer<typeof registryIndexSchema>[number],\n  config: Config,\n) {\n  const payload = await fetchTree(config.style, [component])\n  const baseColor = await getRegistryBaseColor(config.tailwind.baseColor)\n\n  if (!payload) {\n    return []\n  }\n\n  const changes = []\n\n  for (const item of payload) {\n    const targetDir = await getItemTargetPath(config, item)\n\n    if (!targetDir) {\n      continue\n    }\n\n    for (const file of item.files ?? []) {\n      const filePath = path.resolve(\n        targetDir,\n        typeof file === 'string' ? file : file.path,\n      )\n\n      if (!existsSync(filePath)) {\n        continue\n      }\n\n      const fileContent = await fs.readFile(filePath, 'utf8')\n\n      if (typeof file === 'string' || !file.content) {\n        continue\n      }\n\n      const registryContent = await transform({\n        filename: file.path,\n        raw: file.content,\n        config,\n        baseColor,\n      })\n\n      const patch = diffLines(registryContent as string, fileContent)\n      if (patch.length > 1) {\n        changes.push({\n          filePath,\n          patch,\n        })\n      }\n    }\n  }\n\n  return changes\n}\n\nasync function printDiff(diff: Change[]) {\n  diff.forEach((part) => {\n    if (part) {\n      if (part.added) {\n        return process.stdout.write(highlighter.success(part.value))\n      }\n      if (part.removed) {\n        return process.stdout.write(highlighter.error(part.value))\n      }\n\n      return process.stdout.write(part.value)\n    }\n  })\n}\n","import { getConfig } from '@/src/utils/get-config'\nimport { getProjectInfo } from '@/src/utils/get-project-info'\nimport { logger } from '@/src/utils/logger'\nimport { Command } from 'commander'\nimport consola from 'consola'\n\nexport const info = new Command()\n  .name('info')\n  .description('get information about your project')\n  .option(\n    '-c, --cwd <cwd>',\n    'the working directory. defaults to the current directory.',\n    process.cwd(),\n  )\n  .action(async (opts) => {\n    logger.info('> project info')\n    consola.log(await getProjectInfo(opts.cwd))\n    logger.break()\n    logger.info('> components.json')\n    consola.log(await getConfig(opts.cwd))\n  })\n","import type { Config } from '@/src/utils/get-config'\nimport type { iconsSchema } from '@/src/utils/registry/schema'\nimport type { z } from 'zod'\nimport { randomBytes } from 'node:crypto'\nimport { promises as fs } from 'node:fs'\nimport { tmpdir } from 'node:os'\nimport { highlighter } from '@/src/utils/highlighter'\nimport { ICON_LIBRARIES } from '@/src/utils/icon-libraries'\nimport { logger } from '@/src/utils/logger'\nimport { getRegistryIcons } from '@/src/utils/registry'\nimport { spinner } from '@/src/utils/spinner'\nimport { updateDependencies } from '@/src/utils/updaters/update-dependencies'\nimport path from 'pathe'\nimport prompts from 'prompts'\nimport { glob } from 'tinyglobby'\nimport { Project, ScriptKind, SyntaxKind } from 'ts-morph'\n\nexport async function migrateIcons(config: Config) {\n  if (!config.resolvedPaths.ui) {\n    throw new Error(\n      'We could not find a valid `ui` path in your `components.json` file. Please ensure you have a valid `ui` path in your `components.json` file.',\n    )\n  }\n\n  const uiPath = config.resolvedPaths.ui\n  const [files, registryIcons] = await Promise.all([\n    glob('**/*.{js,ts,jsx,tsx}', {\n      cwd: uiPath,\n    }),\n    getRegistryIcons(),\n  ])\n\n  if (Object.keys(registryIcons).length === 0) {\n    throw new Error('Something went wrong fetching the registry icons.')\n  }\n\n  const libraryChoices = Object.entries(ICON_LIBRARIES).map(\n    ([name, iconLibrary]) => ({\n      title: iconLibrary.name,\n      value: name,\n    }),\n  )\n\n  const migrateOptions = await prompts([\n    {\n      type: 'select',\n      name: 'sourceLibrary',\n      message: `Which icon library would you like to ${highlighter.info(\n        'migrate from',\n      )}?`,\n      choices: libraryChoices,\n    },\n    {\n      type: 'select',\n      name: 'targetLibrary',\n      message: `Which icon library would you like to ${highlighter.info(\n        'migrate to',\n      )}?`,\n      choices: libraryChoices,\n    },\n  ])\n\n  if (migrateOptions.sourceLibrary === migrateOptions.targetLibrary) {\n    throw new Error(\n      'You cannot migrate to the same icon library. Please choose a different icon library.',\n    )\n  }\n\n  if (\n    !(\n      migrateOptions.sourceLibrary in ICON_LIBRARIES\n      && migrateOptions.targetLibrary in ICON_LIBRARIES\n    )\n  ) {\n    throw new Error('Invalid icon library. Please choose a valid icon library.')\n  }\n\n  const sourceLibrary\n    = ICON_LIBRARIES[migrateOptions.sourceLibrary as keyof typeof ICON_LIBRARIES]\n  const targetLibrary\n    = ICON_LIBRARIES[migrateOptions.targetLibrary as keyof typeof ICON_LIBRARIES]\n  const { confirm } = await prompts({\n    type: 'confirm',\n    name: 'confirm',\n    initial: true,\n    message: `We will migrate ${highlighter.info(\n      files.length,\n    )} files in ${highlighter.info(\n      `./${path.relative(config.resolvedPaths.cwd, uiPath)}`,\n    )} from ${highlighter.info(sourceLibrary.name)} to ${highlighter.info(\n      targetLibrary.name,\n    )}. Continue?`,\n  })\n\n  if (!confirm) {\n    logger.info('Migration cancelled.')\n    process.exit(0)\n  }\n\n  if (targetLibrary.package) {\n    await updateDependencies([targetLibrary.package], config, {\n      silent: false,\n    })\n  }\n\n  const migrationSpinner = spinner(`Migrating icons...`)?.start()\n\n  await Promise.all(\n    files.map(async (file) => {\n      migrationSpinner.text = `Migrating ${file}...`\n\n      const filePath = path.join(uiPath, file)\n      const fileContent = await fs.readFile(filePath, 'utf-8')\n\n      const content = await migrateIconsFile(\n        fileContent,\n        migrateOptions.sourceLibrary,\n        migrateOptions.targetLibrary,\n        registryIcons,\n      )\n\n      await fs.writeFile(filePath, content)\n    }),\n  )\n\n  migrationSpinner.succeed('Migration complete.')\n}\n\nexport async function migrateIconsFile(\n  content: string,\n  sourceLibrary: keyof typeof ICON_LIBRARIES,\n  targetLibrary: keyof typeof ICON_LIBRARIES,\n  iconsMapping: z.infer<typeof iconsSchema>,\n) {\n  const sourceLibraryImport = ICON_LIBRARIES[sourceLibrary]?.import\n  const targetLibraryImport = ICON_LIBRARIES[targetLibrary]?.import\n\n  const dir = await fs.mkdtemp(path.join(tmpdir(), 'shadcn-'))\n  const project = new Project({\n    compilerOptions: {},\n  })\n\n  const tempFile = path.join(\n    dir,\n    `shadcn-icons-${randomBytes(4).toString('hex')}.tsx`,\n  )\n  const sourceFile = project.createSourceFile(tempFile, content, {\n    scriptKind: ScriptKind.TSX,\n  })\n\n  // Find all sourceLibrary imports.\n  const targetedIcons: string[] = []\n  for (const importDeclaration of sourceFile.getImportDeclarations() ?? []) {\n    if (\n      importDeclaration.getModuleSpecifier()?.getText()\n      !== `\"${sourceLibraryImport}\"`\n    ) {\n      continue\n    }\n\n    for (const specifier of importDeclaration.getNamedImports() ?? []) {\n      const iconName = specifier.getName()\n\n      // TODO: this is O(n^2) but okay for now.\n      const targetedIcon = Object.values(iconsMapping).find(\n        icon => icon[sourceLibrary] === iconName,\n      )?.[targetLibrary]\n\n      if (!targetedIcon || targetedIcons.includes(targetedIcon)) {\n        continue\n      }\n\n      targetedIcons.push(targetedIcon)\n\n      // Remove the named import.\n      specifier.remove()\n\n      // Replace with the targeted icon.\n      sourceFile\n        .getDescendantsOfKind(SyntaxKind.JsxSelfClosingElement)\n        .filter(node => node.getTagNameNode()?.getText() === iconName)\n        .forEach(node => node.getTagNameNode()?.replaceWithText(targetedIcon))\n    }\n\n    // If the named import is empty, remove the import declaration.\n    if (importDeclaration.getNamedImports()?.length === 0) {\n      importDeclaration.remove()\n    }\n  }\n\n  if (targetedIcons.length > 0) {\n    sourceFile.addImportDeclaration({\n      moduleSpecifier: targetLibraryImport,\n      namedImports: targetedIcons.map(icon => ({\n        name: icon,\n      })),\n    })\n  }\n\n  return await sourceFile.getText()\n}\n","import type { migrateOptionsSchema } from '@/src/commands/migrate'\nimport type { z } from 'zod'\n// import { addOptionsSchema } from '@/src/commands/add'\nimport * as ERRORS from '@/src/utils/errors'\nimport { getConfig } from '@/src/utils/get-config'\nimport { highlighter } from '@/src/utils/highlighter'\nimport { logger } from '@/src/utils/logger'\nimport fs from 'fs-extra'\nimport path from 'pathe'\n\nexport async function preFlightMigrate(\n  options: z.infer<typeof migrateOptionsSchema>,\n) {\n  const errors: Record<string, boolean> = {}\n\n  // Ensure target directory exists.\n  // Check for empty project. We assume if no package.json exists, the project is empty.\n  if (\n    !fs.existsSync(options.cwd)\n    || !fs.existsSync(path.resolve(options.cwd, 'package.json'))\n  ) {\n    errors[ERRORS.MISSING_DIR_OR_EMPTY_PROJECT] = true\n    return {\n      errors,\n      config: null,\n    }\n  }\n\n  // Check for existing components.json file.\n  if (!fs.existsSync(path.resolve(options.cwd, 'components.json'))) {\n    errors[ERRORS.MISSING_CONFIG] = true\n    return {\n      errors,\n      config: null,\n    }\n  }\n\n  try {\n    const config = await getConfig(options.cwd)\n\n    return {\n      errors,\n      config: config!,\n    }\n  }\n  catch (error) {\n    logger.break()\n    logger.error(\n      `An invalid ${highlighter.info(\n        'components.json',\n      )} file was found at ${highlighter.info(\n        options.cwd,\n      )}.\\nBefore you can run a migration, you must create a valid ${highlighter.info(\n        'components.json',\n      )} file by running the ${highlighter.info('init')} command.`,\n    )\n    logger.error(\n      `Learn more at ${highlighter.info(\n        'https://shadcn-vue.com/docs/components-json',\n      )}.`,\n    )\n    logger.break()\n    process.exit(1)\n  }\n}\n","import { migrateIcons } from '@/src/migrations/migrate-icons'\nimport { preFlightMigrate } from '@/src/preflights/preflight-migrate'\nimport * as ERRORS from '@/src/utils/errors'\nimport { handleError } from '@/src/utils/handle-error'\nimport { Command } from 'commander'\nimport consola from 'consola'\nimport path from 'pathe'\nimport { z } from 'zod'\n\nexport const migrations = [\n  {\n    name: 'icons',\n    description: 'migrate your ui components to a different icon library.',\n  },\n] as const\n\nexport const migrateOptionsSchema = z.object({\n  cwd: z.string(),\n  list: z.boolean(),\n  migration: z\n    .string()\n    .refine(\n      value =>\n        value && migrations.some(migration => migration.name === value),\n      {\n        message:\n          'You must specify a valid migration. Run `shadcn migrate --list` to see available migrations.',\n      },\n    )\n    .optional(),\n})\n\nexport const migrate = new Command()\n  .name('migrate')\n  .description('run a migration.')\n  .argument('[migration]', 'the migration to run.')\n  .option(\n    '-c, --cwd <cwd>',\n    'the working directory. defaults to the current directory.',\n    process.cwd(),\n  )\n  .option('-l, --list', 'list all migrations.', false)\n  .action(async (migration, opts) => {\n    try {\n      const options = migrateOptionsSchema.parse({\n        cwd: path.resolve(opts.cwd),\n        migration,\n        list: opts.list,\n      })\n\n      if (options.list || !options.migration) {\n        consola.info('Available migrations:')\n        for (const migration of migrations) {\n          consola.info(`- ${migration.name}: ${migration.description}`)\n        }\n        return\n      }\n\n      if (!options.migration) {\n        throw new Error(\n          'You must specify a migration. Run `shadcn migrate --list` to see available migrations.',\n        )\n      }\n\n      const { errors, config } = await preFlightMigrate(options)\n\n      if (\n        errors[ERRORS.MISSING_DIR_OR_EMPTY_PROJECT]\n        || errors[ERRORS.MISSING_CONFIG]\n      ) {\n        throw new Error(\n          'No `components.json` file found. Ensure you are at the root of your project.',\n        )\n      }\n\n      if (!config) {\n        throw new Error(\n          'Something went wrong reading your `components.json` file. Please ensure you have a valid `components.json` file.',\n        )\n      }\n\n      if (options.migration === 'icons') {\n        await migrateIcons(config)\n      }\n    }\n    catch (error) {\n      handleError(error)\n    }\n  })\n","#!/usr/bin/env node\nimport { add } from '@/src/commands/add'\nimport { diff } from '@/src/commands/diff'\nimport { info } from '@/src/commands/info'\nimport { init } from '@/src/commands/init'\nimport { migrate } from '@/src/commands/migrate'\nimport { Command } from 'commander'\n\nimport packageJson from '../package.json'\n\nprocess.on('SIGINT', () => process.exit(0))\nprocess.on('SIGTERM', () => process.exit(0))\n\nasync function main() {\n  const program = new Command()\n    .name('shadcn-vue')\n    .description('add components and dependencies to your project')\n    .version(\n      packageJson.version || '1.0.0',\n      '-v, --version',\n      'display the version number',\n    )\n\n  program\n    .addCommand(init)\n    .addCommand(add)\n    .addCommand(diff)\n    .addCommand(migrate)\n    .addCommand(info)\n\n  program.parse()\n}\n\nmain()\n","{\n  \"name\": \"shadcn-vue\",\n  \"type\": \"module\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Add components to your apps.\",\n  \"publishConfig\": {\n    \"access\": \"public\"\n  },\n  \"license\": \"MIT\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/unovue/shadcn-vue.git\",\n    \"directory\": \"packages/cli\"\n  },\n  \"keywords\": [\n    \"components\",\n    \"ui\",\n    \"vue\",\n    \"nuxt\",\n    \"tailwind\",\n    \"radix-ui\",\n    \"radix-vue\",\n    \"reka-ui\",\n    \"shadcn\",\n    \"shadcn-vue\"\n  ],\n  \"exports\": \"./dist/index.js\",\n  \"bin\": \"./dist/index.js\",\n  \"files\": [\n    \"dist\"\n  ],\n  \"scripts\": {\n    \"dev\": \"tsup --watch\",\n    \"build\": \"tsup\",\n    \"typecheck\": \"tsc --noEmit\",\n    \"clean\": \"node ./scripts/rimraf.js\",\n    \"lint\": \"eslint .\",\n    \"lint:fix\": \"eslint --fix .\",\n    \"start:dev\": \"REGISTRY_URL=http://localhost:5173/r node dist/index.js\",\n    \"start\": \"node dist/index.js\",\n    \"release\": \"changeset version\",\n    \"pub:beta\": \"pnpm build && pnpm publish --no-git-checks --access public --tag beta\",\n    \"pub:next\": \"pnpm build && pnpm publish --no-git-checks --access public --tag next\",\n    \"pub:release\": \"pnpm build && pnpm publish  --no-git-checks --access public\",\n    \"test\": \"REGISTRY_URL=http://localhost:5173/r vitest run\",\n    \"test:update\": \"vitest run -u\",\n    \"test:ui\": \"vitest --ui\"\n  },\n  \"peerDependencies\": {\n    \"@vitest/ui\": \"*\",\n    \"vitest\": \"*\"\n  },\n  \"dependencies\": {\n    \"@unovue/detypes\": \"^0.8.4\",\n    \"@vue/compiler-sfc\": \"^3.5\",\n    \"c12\": \"^2.0.2\",\n    \"commander\": \"^12.1.0\",\n    \"consola\": \"^3.4.0\",\n    \"deepmerge\": \"^4.3.1\",\n    \"diff\": \"^7.0.0\",\n    \"fs-extra\": \"^11.3.0\",\n    \"get-tsconfig\": \"^4.10.0\",\n    \"lodash-es\": \"^4.17.21\",\n    \"magic-string\": \"^0.30.17\",\n    \"nypm\": \"^0.5.2\",\n    \"ofetch\": \"^1.4.1\",\n    \"ora\": \"^8.2.0\",\n    \"pathe\": \"^2.0.3\",\n    \"pkg-types\": \"^1.3.1\",\n    \"postcss\": \"^8.5.2\",\n    \"prompts\": \"^2.4.2\",\n    \"reka-ui\": \"catalog:\",\n    \"stringify-object\": \"^5.0.0\",\n    \"tailwindcss\": \"^3.4.16\",\n    \"tinyexec\": \"^0.3.2\",\n    \"tinyglobby\": \"^0.2.10\",\n    \"ts-morph\": \"^24.0.0\",\n    \"undici\": \"^7.3.0\",\n    \"vue-metamorph\": \"3.2.0\",\n    \"zod\": \"^3.24.2\"\n  },\n  \"devDependencies\": {\n    \"@types/diff\": \"^7.0.1\",\n    \"@types/fs-extra\": \"^11.0.4\",\n    \"@types/lodash-es\": \"^4.17.12\",\n    \"@types/node\": \"^22.13.4\",\n    \"@types/prompts\": \"^2.4.9\",\n    \"@types/stringify-object\": \"^4.0.5\",\n    \"tsup\": \"^8.3.6\",\n    \"type-fest\": \"^4.34.1\",\n    \"typescript\": \"catalog:\",\n    \"vite-tsconfig-paths\": \"^5.1.4\"\n  }\n}\n"],"mappings":"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","names":["fs","consola","deepmerge","path","z","path","z","deepmerge","url","fs","path","fs","fs","path","z","z","path","fs","path","fs","path","z","transformCssVars","path","prefix","path","path","node","nodes","path","transform","transformCssVars","path","fs","transform","fs","path","SyntaxKind","fs","path","prompts","z","fs","style","fs","path","Command","path","prompts","z","existsSync","fs","Command","path","z","existsSync","component","changes","fs","transform","diff","Command","consola","fs","tmpdir","path","prompts","glob","Project","ScriptKind","SyntaxKind","fs","tmpdir","fs","path","Command","consola","path","z","migration","Command","Command"]}