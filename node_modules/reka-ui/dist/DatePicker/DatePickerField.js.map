{"version":3,"file":"DatePickerField.js","sources":["../../src/DatePicker/DatePickerField.vue"],"sourcesContent":["<script lang=\"ts\">\nimport type { DateValue } from '@internationalized/date'\nimport { DateFieldRoot } from '..'\nimport { injectDatePickerRootContext } from './DatePickerRoot.vue'\n</script>\n\n<script setup lang=\"ts\">\nconst rootContext = injectDatePickerRootContext()\n</script>\n\n<template>\n  <DateFieldRoot\n    v-slot=\"{ segments, modelValue }\"\n    :ref=\"rootContext.dateFieldRef\"\n    :model-value=\"rootContext.modelValue.value\"\n    :placeholder=\"rootContext.placeholder.value\"\n    v-bind=\"{\n      id: rootContext.id.value,\n      name: rootContext.name.value,\n      disabled: rootContext.disabled.value,\n      minValue: rootContext.minValue.value,\n      maxValue: rootContext.maxValue.value,\n      readonly: rootContext.readonly.value,\n      hourCycle: rootContext.hourCycle.value,\n      granularity: rootContext.granularity.value,\n      hideTimeZone: rootContext.hideTimeZone.value,\n      locale: rootContext.locale.value,\n      isDateUnavailable: rootContext.isDateUnavailable,\n      required: rootContext.required.value,\n      dir: rootContext.dir.value,\n    }\"\n    @update:model-value=\"(date: DateValue | undefined) => {\n      if (date && rootContext.modelValue.value && date.compare(rootContext.modelValue.value) === 0) return\n      rootContext.onDateChange(date)\n    }\"\n    @update:placeholder=\"(date: DateValue) => {\n      if (date.compare(rootContext.placeholder.value) === 0) return\n      rootContext.onPlaceholderChange(date)\n    }\"\n  >\n    <slot\n      :segments=\"segments\"\n      :model-value=\"modelValue\"\n    />\n  </DateFieldRoot>\n</template>\n"],"names":[],"mappings":";;;;;;;;AAOA,IAAA,MAAM,cAAc,2BAA4B,EAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}