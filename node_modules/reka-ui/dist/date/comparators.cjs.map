{"version":3,"file":"comparators.cjs","sources":["../../src/shared/date/comparators.ts","../../src/date/comparators.ts"],"sourcesContent":["/*\n  * Implementation ported from https://github.com/melt-ui/melt-ui/blob/develop/src/lib/internal/helpers/date/utils.ts\n*/\n\nimport { CalendarDate, CalendarDateTime, DateFormatter, type DateValue, Time, type ZonedDateTime, createCalendar, toCalendar } from '@internationalized/date'\n\nexport type TimeValue = Time | CalendarDateTime | ZonedDateTime\n\nexport type Granularity = 'day' | 'hour' | 'minute' | 'second'\nexport type TimeGranularity = 'hour' | 'minute' | 'second'\n\ntype GetDefaultDateProps = {\n  defaultValue?: DateValue | DateValue[] | undefined\n  defaultPlaceholder?: DateValue | undefined\n  granularity?: Granularity\n  locale?: string\n}\n\n/**\n * A helper function used throughout the various date builders\n * to generate a default `DateValue` using the `defaultValue`,\n * `defaultPlaceholder`, and `granularity` props.\n *\n * It's important to match the `DateValue` type being used\n * elsewhere in the builder, so they behave according to the\n * behavior the user expects based on the props they've provided.\n *\n */\nexport function getDefaultDate(props: GetDefaultDateProps): DateValue {\n  const { defaultValue, defaultPlaceholder, granularity = 'day', locale = 'en' } = props\n\n  if (Array.isArray(defaultValue) && defaultValue.length)\n    return defaultValue.at(-1)!.copy()\n\n  if (defaultValue && !Array.isArray(defaultValue))\n    return defaultValue.copy()\n\n  if (defaultPlaceholder)\n    return defaultPlaceholder.copy()\n\n  const date = new Date()\n  const year = date.getFullYear()\n  const month = date.getMonth() + 1\n  const day = date.getDate()\n  const calendarDateTimeGranularities = ['hour', 'minute', 'second']\n\n  const defaultFormatter = new DateFormatter(locale)\n  const calendar = createCalendar(defaultFormatter.resolvedOptions().calendar)\n\n  if (calendarDateTimeGranularities.includes(granularity ?? 'day'))\n    return toCalendar(new CalendarDateTime(year, month, day, 0, 0, 0), calendar)\n\n  return toCalendar(new CalendarDate(year, month, day), calendar)\n}\n\ntype GetDefaultTimeProps = {\n  defaultValue?: TimeValue | undefined\n  defaultPlaceholder?: TimeValue | undefined\n}\n\nexport function getDefaultTime(props: GetDefaultTimeProps): TimeValue {\n  const { defaultValue, defaultPlaceholder } = props\n\n  if (defaultValue) {\n    return defaultValue.copy()\n  }\n\n  if (defaultPlaceholder) {\n    return defaultPlaceholder.copy()\n  }\n\n  return new Time(0, 0, 0)\n}\n","import { CalendarDateTime, type DateValue, ZonedDateTime, getDayOfWeek, getLocalTimeZone, parseDate, parseDateTime, parseZonedDateTime, toCalendar } from '@internationalized/date'\nimport type { Matcher } from './types'\n\n/**\n * Given a date string and a reference `DateValue` object, parse the\n * string to the same type as the reference object.\n *\n * Useful for parsing strings from data attributes, which are always\n * strings, to the same type being used by the date component.\n */\nexport function parseStringToDateValue(dateStr: string, referenceVal: DateValue): DateValue {\n  let dateValue: DateValue\n  if (isZonedDateTime(referenceVal))\n    dateValue = parseZonedDateTime(dateStr)\n\n  else if (isCalendarDateTime(referenceVal))\n    dateValue = parseDateTime(dateStr)\n\n  else\n    dateValue = parseDate(dateStr)\n\n  return dateValue.calendar !== referenceVal.calendar ? toCalendar(dateValue, referenceVal.calendar) : dateValue\n}\n\n/**\n * Given a `DateValue` object, convert it to a native `Date` object.\n * If a timezone is provided, the date will be converted to that timezone.\n * If no timezone is provided, the date will be converted to the local timezone.\n */\nexport function toDate(dateValue: DateValue, tz: string = getLocalTimeZone()) {\n  if (isZonedDateTime(dateValue))\n    return dateValue.toDate()\n  else\n    return dateValue.toDate(tz)\n}\n\nexport function isCalendarDateTime(dateValue: DateValue): dateValue is CalendarDateTime {\n  return dateValue instanceof CalendarDateTime\n}\n\nexport function isZonedDateTime(dateValue: DateValue): dateValue is ZonedDateTime {\n  return dateValue instanceof ZonedDateTime\n}\n\nexport function hasTime(dateValue: DateValue) {\n  return isCalendarDateTime(dateValue) || isZonedDateTime(dateValue)\n}\n\n/**\n * Given a date, return the number of days in the month.\n */\nexport function getDaysInMonth(date: Date | DateValue) {\n  if (date instanceof Date) {\n    const year = date.getFullYear()\n    const month = date.getMonth() + 1\n    /**\n     * By using zero as the day, we get the\n     * last day of the previous month, which\n     * is the month we originally passed in.\n     */\n    return new Date(year, month, 0).getDate()\n  }\n  else {\n    return date.set({ day: 100 }).day\n  }\n}\n\n/**\n * Determine if a date is before the reference date.\n * @param dateToCompare - is this date before the `referenceDate`\n * @param referenceDate - is the `dateToCompare` before this date\n *\n * @see {@link isBeforeOrSame} for inclusive\n */\nexport function isBefore(dateToCompare: DateValue, referenceDate: DateValue) {\n  return dateToCompare.compare(referenceDate) < 0\n}\n\n/**\n * Determine if a date is after the reference date.\n * @param dateToCompare - is this date after the `referenceDate`\n * @param referenceDate - is the `dateToCompare` after this date\n *\n * @see {@link isAfterOrSame} for inclusive\n */\nexport function isAfter(dateToCompare: DateValue, referenceDate: DateValue) {\n  return dateToCompare.compare(referenceDate) > 0\n}\n\n/**\n * Determine if a date is before or the same as the reference date.\n *\n * @param dateToCompare - the date to compare\n * @param referenceDate - the reference date to make the comparison against\n *\n * @see {@link isBefore} for non-inclusive\n */\nexport function isBeforeOrSame(dateToCompare: DateValue, referenceDate: DateValue) {\n  return dateToCompare.compare(referenceDate) <= 0\n}\n\n/**\n * Determine if a date is after or the same as the reference date.\n *\n * @param dateToCompare - is this date after or the same as the `referenceDate`\n * @param referenceDate - is the `dateToCompare` after or the same as this date\n *\n * @see {@link isAfter} for non-inclusive\n */\nexport function isAfterOrSame(dateToCompare: DateValue, referenceDate: DateValue) {\n  return dateToCompare.compare(referenceDate) >= 0\n}\n\n/**\n * Determine if a date is inclusively between a start and end reference date.\n *\n * @param date - is this date inclusively between the `start` and `end` dates\n * @param start - the start reference date to make the comparison against\n * @param end - the end reference date to make the comparison against\n *\n * @see {@link isBetween} for non-inclusive\n */\nexport function isBetweenInclusive(date: DateValue, start: DateValue, end: DateValue) {\n  return isAfterOrSame(date, start) && isBeforeOrSame(date, end)\n}\n\n/**\n * Determine if a date is between a start and end reference date.\n *\n * @param date - is this date between the `start` and `end` dates\n * @param start - the start reference date to make the comparison against\n * @param end - the end reference date to make the comparison against\n *\n * @see {@link isBetweenInclusive} for inclusive\n */\nexport function isBetween(date: DateValue, start: DateValue, end: DateValue) {\n  return isAfter(date, start) && isBefore(date, end)\n}\n\nexport function getLastFirstDayOfWeek<T extends DateValue = DateValue>(\n  date: T,\n  firstDayOfWeek: number,\n  locale: string,\n): T {\n  const day = getDayOfWeek(date, locale)\n\n  if (firstDayOfWeek > day)\n    return date.subtract({ days: day + 7 - firstDayOfWeek }) as T\n\n  if (firstDayOfWeek === day)\n    return date as T\n\n  return date.subtract({ days: day - firstDayOfWeek }) as T\n}\n\nexport function getNextLastDayOfWeek<T extends DateValue = DateValue>(\n  date: T,\n  firstDayOfWeek: number,\n  locale: string,\n): T {\n  const day = getDayOfWeek(date, locale)\n  const lastDayOfWeek = firstDayOfWeek === 0 ? 6 : firstDayOfWeek - 1\n\n  if (day === lastDayOfWeek)\n    return date as T\n\n  if (day > lastDayOfWeek)\n    return date.add({ days: 7 - day + lastDayOfWeek }) as T\n\n  return date.add({ days: lastDayOfWeek - day }) as T\n}\n\nexport function areAllDaysBetweenValid(\n  start: DateValue,\n  end: DateValue,\n  isUnavailable: Matcher | undefined,\n  isDisabled: Matcher | undefined,\n) {\n  if (isUnavailable === undefined && isDisabled === undefined)\n    return true\n\n  let dCurrent = start.add({ days: 1 })\n  if (isDisabled?.(dCurrent) || isUnavailable?.(dCurrent))\n    return false\n\n  const dEnd = end\n  while (dCurrent.compare(dEnd) < 0) {\n    dCurrent = dCurrent.add({ days: 1 })\n    if (isDisabled?.(dCurrent) || isUnavailable?.(dCurrent))\n      return false\n  }\n  return true\n}\n"],"names":["date","DateFormatter","createCalendar","toCalendar","CalendarDateTime","CalendarDate","Time","parseZonedDateTime","parseDateTime","parseDate","getLocalTimeZone","ZonedDateTime","getDayOfWeek"],"mappings":"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"}